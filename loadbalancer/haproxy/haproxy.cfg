# HAProxy Load Balancer Configuration for Community Platform
# Version: 2.0.0

global
    # Basic settings
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # Logging
    log stdout local0
    log stdout local1 notice
    
    # Performance tuning
    maxconn 4096
    tune.ssl.default-dh-param 2048
    
    # Security
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    
    # SSL
    ssl-default-bind-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    # Logging
    log global
    option httplog
    option dontlognull
    option log-health-checks
    
    # Timeouts
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 10s
    timeout check 10s
    
    # Error handling
    option redispatch
    retries 3
    
    # Health checks
    option httpchk GET /health
    
    # Compression
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml

# =============================================================================
# STATISTICS
# =============================================================================

listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:admin123

# =============================================================================
# FRONTEND SERVERS
# =============================================================================

frontend frontend_http
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }

frontend frontend_https
    bind *:443 ssl crt /etc/ssl/certs/community.example.com.pem
    bind *:8443 ssl crt /etc/ssl/certs/api.community.example.com.pem
    bind *:9443 ssl crt /etc/ssl/certs/admin.community.example.com.pem
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 10 }
    
    # Routing rules
    use_backend frontend_servers if { hdr(host) -i community.example.com }
    use_backend api_servers if { hdr(host) -i api.community.example.com }
    use_backend admin_servers if { hdr(host) -i admin.community.example.com }
    
    # Default backend
    default_backend frontend_servers

# =============================================================================
# BACKEND SERVERS
# =============================================================================

# Frontend servers
backend frontend_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server frontend-1 frontend-1:3000 check inter 2000ms rise 2 fall 3
    server frontend-2 frontend-2:3000 check inter 2000ms rise 2 fall 3
    server frontend-3 frontend-3:3000 check inter 2000ms rise 2 fall 3
    
    # Health check
    option httpchk GET /health
    http-check expect status 200

# API Gateway servers
backend api_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server api-gateway-1 api-gateway-1:8000 check inter 2000ms rise 2 fall 3
    server api-gateway-2 api-gateway-2:8000 check inter 2000ms rise 2 fall 3
    server api-gateway-3 api-gateway-3:8000 check inter 2000ms rise 2 fall 3

# Admin servers
backend admin_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server admin-1 admin-service-1:3009 check inter 2000ms rise 2 fall 3

# Authentication service
backend auth_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server auth-1 auth-service-1:3001 check inter 2000ms rise 2 fall 3
    server auth-2 auth-service-2:3001 check inter 2000ms rise 2 fall 3

# User service
backend user_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server user-1 user-service-1:3002 check inter 2000ms rise 2 fall 3
    server user-2 user-service-2:3002 check inter 2000ms rise 2 fall 3

# Content service
backend content_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server content-1 content-service-1:3003 check inter 2000ms rise 2 fall 3
    server content-2 content-service-2:3003 check inter 2000ms rise 2 fall 3
    server content-3 content-service-3:3003 check inter 2000ms rise 2 fall 3

# Notification service
backend notification_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server notification-1 notification-service-1:3004 check inter 2000ms rise 2 fall 3
    server notification-2 notification-service-2:3004 check inter 2000ms rise 2 fall 3

# Analytics service
backend analytics_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server analytics-1 analytics-service-1:3005 check inter 2000ms rise 2 fall 3
    server analytics-2 analytics-service-2:3005 check inter 2000ms rise 2 fall 3

# Search service
backend search_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server search-1 search-service-1:3006 check inter 2000ms rise 2 fall 3
    server search-2 search-service-2:3006 check inter 2000ms rise 2 fall 3

# File service
backend file_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server file-1 file-service-1:3007 check inter 2000ms rise 2 fall 3
    server file-2 file-service-2:3007 check inter 2000ms rise 2 fall 3

# Chat service
backend chat_servers
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    server chat-1 chat-service-1:3008 check inter 2000ms rise 2 fall 3
    server chat-2 chat-service-2:3008 check inter 2000ms rise 2 fall 3

# =============================================================================
# RESOLVERS
# =============================================================================

resolvers dns
    nameserver dns1 8.8.8.8:53
    nameserver dns2 8.8.4.4:53
    hold other 30s
    hold refused 30s
    hold nx 30s
    hold timeout 30s
    hold valid 10s
    hold obsolete 30s

# =============================================================================
# PEERS
# =============================================================================

peers haproxy_peers
    peer haproxy-1 haproxy-1:1024
    peer haproxy-2 haproxy-2:1024
    peer haproxy-3 haproxy-3:1024

# =============================================================================
# STICK TABLES
# =============================================================================

backend stick_tables
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    stick-table type ip size 100k expire 30s store http_req_rate(1m)
    stick-table type ip size 100k expire 30s store http_req_rate(1h)
