# Kubernetes Cluster Configuration for Community Platform
# Version: 2.0.0

apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-config
  namespace: community-platform
data:
  cluster-name: "community-platform-cluster"
  cluster-version: "1.28"
  node-count: "6"
  master-nodes: "3"
  worker-nodes: "3"

---
# Node Pool Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-pool-config
  namespace: community-platform
data:
  master-pool: |
    name: "master-pool"
    instance-type: "t3.large"
    min-size: "3"
    max-size: "3"
    desired-size: "3"
    disk-size: "50Gi"
    disk-type: "gp3"
    labels:
      node-role.kubernetes.io/master: "true"
      node-role.kubernetes.io/control-plane: "true"
    taints:
      - key: "node-role.kubernetes.io/master"
        value: "true"
        effect: "NoSchedule"
  
  worker-pool: |
    name: "worker-pool"
    instance-type: "t3.xlarge"
    min-size: "3"
    max-size: "10"
    desired-size: "6"
    disk-size: "100Gi"
    disk-type: "gp3"
    labels:
      node-role.kubernetes.io/worker: "true"
      node-type: "general"
    taints: []

---
# Cluster Autoscaler Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
    spec:
      containers:
      - name: cluster-autoscaler
        image: k8s.gcr.io/autoscaling/cluster-autoscaler:v1.28.0
        command:
        - ./cluster-autoscaler
        - --v=4
        - --stderrthreshold=info
        - --cloud-provider=aws
        - --skip-nodes-with-local-storage=false
        - --expander=least-waste
        - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/community-platform-cluster
        - --balance-similar-node-groups
        - --scale-down-enabled=true
        - --scale-down-delay-after-add=10m
        - --scale-down-unneeded-time=10m
        - --max-node-provision-time=15m
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        env:
        - name: AWS_REGION
          value: "us-west-2"
        - name: AWS_AVAILABILITY_ZONES
          value: "us-west-2a,us-west-2b,us-west-2c"
        volumeMounts:
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
      volumes:
      - name: ssl-certs
        hostPath:
          path: /etc/ssl/certs
      serviceAccountName: cluster-autoscaler
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
# Horizontal Pod Autoscaler for API Gateway
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: community-platform
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
# Vertical Pod Autoscaler for API Gateway
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: api-gateway-vpa
  namespace: community-platform
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: api-gateway
      minAllowed:
        cpu: 100m
        memory: 128Mi
      maxAllowed:
        cpu: 2000m
        memory: 4Gi
      controlledResources: ["cpu", "memory"]

---
# Pod Disruption Budget for API Gateway
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: api-gateway-pdb
  namespace: community-platform
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: api-gateway

---
# Network Policy for API Gateway
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: api-gateway-netpol
  namespace: community-platform
spec:
  podSelector:
    matchLabels:
      app: api-gateway
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: community-platform
    - ipBlock:
        cidr: 10.0.0.0/8
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: community-platform
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 3001
    - protocol: TCP
      port: 3002
    - protocol: TCP
      port: 3003
    - protocol: TCP
      port: 3004
    - protocol: TCP
      port: 3005
    - protocol: TCP
      port: 3006
    - protocol: TCP
      port: 3007
    - protocol: TCP
      port: 3008
    - protocol: TCP
      port: 3009

---
# Service Monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: community-platform-monitor
  namespace: community-platform
  labels:
    app: community-platform
spec:
  selector:
    matchLabels:
      app: community-platform
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
