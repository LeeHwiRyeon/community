name: 릴리스 자동화

on:
  push:
    tags:
      - 'v*'

jobs:
  # 릴리스 노트 생성
  generate-release-notes:
    name: 릴리스 노트 생성
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.generate-notes.outputs.release-notes }}
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 릴리스 노트 생성
        id: generate-notes
        uses: release-drafter/release-drafter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Docker 이미지 빌드 및 푸시
  build-and-push:
    name: Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: generate-release-notes
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4

      - name: Docker Buildx 설정
        uses: docker/setup-buildx-action@v3

      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 메타데이터 추출
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: 백엔드 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          target: backend_runner
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 프론트엔드 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          target: frontend_runner
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # GitHub 릴리스 생성
  create-release:
    name: GitHub 릴리스 생성
    runs-on: ubuntu-latest
    needs: [generate-release-notes, build-and-push]
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4

      - name: 릴리스 생성
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [create-release, build-and-push]
    environment: production
    steps:
      - name: Checkout 코드
        uses: actions/checkout@v4

      - name: 서버에 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/community
            git fetch --tags
            git checkout ${{ github.ref_name }}
            docker-compose -f docker-compose.production.yml down
            docker-compose -f docker-compose.production.yml pull
            docker-compose -f docker-compose.production.yml up -d
            docker system prune -f

      - name: 헬스 체크
        run: |
          sleep 60
          for i in {1..10}; do
            if curl -f http://${{ secrets.PROD_HOST }}/api/health-check; then
              echo "배포 성공!"
              break
            fi
            echo "헬스 체크 실패, 재시도 중... ($i/10)"
            sleep 10
          done

      - name: 배포 알림
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        if: always()

  # 롤백 준비
  prepare-rollback:
    name: 롤백 준비
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure()
    steps:
      - name: 롤백 스크립트 생성
        run: |
          echo "#!/bin/bash" > rollback.sh
          echo "cd /opt/community" >> rollback.sh
          echo "git checkout \$(git describe --tags --abbrev=0 HEAD~1)" >> rollback.sh
          echo "docker-compose -f docker-compose.production.yml down" >> rollback.sh
          echo "docker-compose -f docker-compose.production.yml up -d" >> rollback.sh
          chmod +x rollback.sh

      - name: 롤백 스크립트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: rollback-script
          path: rollback.sh

      - name: 롤백 알림
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "🚨 배포 실패! 롤백이 필요합니다."
