# CD 파이프라인 - 자동 배포
name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 선택'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 스테이징 배포
  deploy-staging:
    name: 스테이징 배포
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging,enable={{is_default_branch}}
          
    - name: Docker 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 스테이징 환경 배포
      run: |
        echo "스테이징 환경에 배포 중..."
        # 실제 배포 스크립트 실행
        # kubectl apply -f k8s/staging/
        # 또는
        # docker-compose -f docker-compose.staging.yml up -d
        
    - name: 배포 후 헬스 체크
      run: |
        echo "배포 후 헬스 체크 중..."
        sleep 30
        curl -f https://staging.your-domain.com/api/health || exit 1
        
    - name: 스테이징 배포 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 프로덕션 배포
  deploy-production:
    name: 프로덕션 배포
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: [deploy-staging]
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: Docker 메타데이터 추출
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Docker 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 프로덕션 환경 배포
      run: |
        echo "프로덕션 환경에 배포 중..."
        # 실제 배포 스크립트 실행
        # kubectl apply -f k8s/production/
        # 또는
        # docker-compose -f docker-compose.production.yml up -d
        
    - name: 배포 후 헬스 체크
      run: |
        echo "배포 후 헬스 체크 중..."
        sleep 60
        curl -f https://your-domain.com/api/health || exit 1
        
    - name: 프로덕션 배포 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
      
    - name: 릴리스 노트 생성
      uses: release-drafter/release-drafter@v5
      with:
        config-name: release-drafter.yml
        disable-autolabeler: true
      if: startsWith(github.ref, 'refs/tags/v')

  # 롤백 작업
  rollback:
    name: 롤백
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    environment: ${{ github.ref == 'refs/heads/main' && 'staging' || 'production' }}
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 이전 버전으로 롤백
      run: |
        echo "이전 버전으로 롤백 중..."
        # 롤백 스크립트 실행
        # kubectl rollout undo deployment/community-backend
        # kubectl rollout undo deployment/community-frontend
        
    - name: 롤백 후 헬스 체크
      run: |
        echo "롤백 후 헬스 체크 중..."
        sleep 30
        curl -f https://your-domain.com/api/health || exit 1
        
    - name: 롤백 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # 배포 상태 모니터링
  monitor-deployment:
    name: 배포 상태 모니터링
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: 배포 상태 모니터링
      run: |
        echo "배포 상태 모니터링 중..."
        # 모니터링 스크립트 실행
        # kubectl get pods -l app=community-backend
        # kubectl get pods -l app=community-frontend
        
    - name: 성능 메트릭 수집
      run: |
        echo "성능 메트릭 수집 중..."
        # 성능 메트릭 수집 스크립트 실행
        # curl -f https://your-domain.com/api/metrics
        
    - name: 모니터링 알림
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#monitoring'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
