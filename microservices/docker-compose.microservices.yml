version: '3.8'

services:
  # API Gateway (Kong)
  api-gateway:
    image: kong:3.4-alpine
    container_name: community-api-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stdout
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PLUGINS: bundled,rate-limiting,cors,jwt,request-transformer,response-transformer,prometheus
    ports:
      - "8000:8000" # API Gateway
      - "8001:8001" # Kong Admin
    volumes:
      - ./api-gateway/kong.yml:/kong/declarative/kong.yml:ro
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 인증 서비스
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: community-auth-service
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_auth
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: http://localhost:3000,https://community.example.com
    ports:
      - "3001:3001"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3001/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 사용자 서비스
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: community-user-service
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: mongodb://mongo:27017/community_users
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
    ports:
      - "3002:3002"
    networks:
      - community-network
    depends_on:
      - mongo
      - redis
      - auth-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3002/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 콘텐츠 서비스
  content-service:
    build:
      context: ./services/content-service
      dockerfile: Dockerfile
    container_name: community-content-service
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_content
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
      FILE_SERVICE_URL: http://file-service:3007
    ports:
      - "3003:3003"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
      - auth-service
      - file-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3003/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 알림 서비스
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: community-notification-service
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_notifications
      REDIS_URL: redis://redis:6379
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SLACK_WEBHOOK: ${SLACK_WEBHOOK}
      DISCORD_WEBHOOK: ${DISCORD_WEBHOOK}
    ports:
      - "3004:3004"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3004/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 분석 서비스
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    container_name: community-analytics-service
    environment:
      NODE_ENV: production
      PORT: 3005
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_analytics
      REDIS_URL: redis://redis:6379
      CLICKHOUSE_URL: http://clickhouse:8123
    ports:
      - "3005:3005"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
      - clickhouse
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3005/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 검색 서비스
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    container_name: community-search-service
    environment:
      NODE_ENV: production
      PORT: 3006
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://redis:6379
    ports:
      - "3006:3006"
    networks:
      - community-network
    depends_on:
      - elasticsearch
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3006/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 파일 서비스
  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    container_name: community-file-service
    environment:
      NODE_ENV: production
      PORT: 3007
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: community-files
      REDIS_URL: redis://redis:6379
    ports:
      - "3007:3007"
    networks:
      - community-network
    depends_on:
      - minio
      - redis
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3007/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 채팅 서비스
  chat-service:
    build:
      context: ./services/chat-service
      dockerfile: Dockerfile
    container_name: community-chat-service
    environment:
      NODE_ENV: production
      PORT: 3008
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_chat
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
    ports:
      - "3008:3008"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
      - auth-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3008/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 관리자 서비스
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: community-admin-service
    environment:
      NODE_ENV: production
      PORT: 3009
      DATABASE_URL: postgresql://postgres:password@postgres:5432/community_admin
      REDIS_URL: redis://redis:6379
      AUTH_SERVICE_URL: http://auth-service:3001
    ports:
      - "3009:3009"
    networks:
      - community-network
    depends_on:
      - postgres
      - redis
      - auth-service
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3009/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 프론트엔드
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: community-frontend
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://api-gateway:8000
      REACT_APP_WS_URL: ws://chat-service:3008
    ports:
      - "3000:3000"
    networks:
      - community-network
    depends_on:
      - api-gateway
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 데이터베이스들
  postgres:
    image: postgres:15-alpine
    container_name: community-postgres
    environment:
      POSTGRES_DB: community
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_MULTIPLE_DATABASES: community_auth,community_content,community_notifications,community_analytics,community_chat,community_admin
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    ports:
      - "5432:5432"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  mongo:
    image: mongo:7.0
    container_name: community-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: community_users
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: community-redis
    command: redis-server --appendonly yes --requirepass password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 검색 엔진
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: community-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 분석 데이터베이스
  clickhouse:
    image: clickhouse/clickhouse-server:23.8
    container_name: community-clickhouse
    environment:
      CLICKHOUSE_DB: community_analytics
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: password
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 파일 저장소
  minio:
    image: minio/minio:latest
    container_name: community-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 메시지 큐
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: community-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    networks:
      - community-network
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: community-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: community-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - community-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: community-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - community-network
    depends_on:
      - prometheus
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: community-jaeger
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - community-network
    restart: unless-stopped

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  elasticsearch_data:
  clickhouse_data:
  minio_data:
  prometheus_data:
  grafana_data:


networks:
  community-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
