version: '3.8'

services:
  # 백엔드 서비스
  backend:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: community-backend-prod
    restart: unless-stopped
    ports:
      - "50000:50000"
    environment:
      - NODE_ENV=production
      - PORT=50000
    env_file:
      - .env.production
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mysql
      - redis
    networks:
      - community-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:50000/api/health-check" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 프론트엔드 서비스 (Nginx로 서빙)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: community-frontend-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - community-network

  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    container_name: community-mysql-prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DATABASE_NAME}
      MYSQL_USER: ${DATABASE_USER}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "3306:3306"
    networks:
      - community-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis 캐시
  redis:
    image: redis:7-alpine
    container_name: community-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - community-network

  # Prometheus 모니터링
  prometheus:
    image: prom/prometheus:latest
    container_name: community-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - community-network

  # Grafana 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: community-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - community-network

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: community-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    networks:
      - community-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  community-network:
    driver: bridge
