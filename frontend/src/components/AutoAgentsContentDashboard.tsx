/**
 * ü§ñ AUTOAGENTS Ïª®ÌÖêÏ∏† ÎåÄÏãúÎ≥¥Îìú
 * 
 * AI Í∏∞Î∞ò Ïª®ÌÖêÏ∏† Î∂ÑÏÑù, ÏÉùÏÑ±, Í∞úÏù∏Ìôî Ï∂îÏ≤úÏùÑ Í¥ÄÎ¶¨ÌïòÎäî
 * ÌÜµÌï© ÎåÄÏãúÎ≥¥Îìú Ïª¥Ìè¨ÎÑåÌä∏
 * 
 * @author AUTOAGENTS Manager
 * @version 3.0.0
 * @created 2025-10-02
 */

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
    Box,
    Container,
    Typography,
    Grid,
    Card,
    CardContent,
    CardHeader,
    Button,
    ButtonGroup,
    TextField,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Chip,
    LinearProgress,
    CircularProgress,
    Alert,
    AlertTitle,
    Accordion,
    AccordionSummary,
    AccordionDetails,
    Tabs,
    Tab,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    Tooltip,
    IconButton,
    Badge,
    Divider,
    List,
    ListItem,
    ListItemText,
    ListItemIcon,
    Switch,
    FormControlLabel
} from '@mui/material';
import {
    Analytics as AnalyticsIcon,
    AutoFixHigh as AutoFixIcon,
    Psychology as PsychologyIcon,
    TrendingUp as TrendingIcon,
    SmartToy as SmartToyIcon,
    Assessment as AssessmentIcon,
    Recommend as RecommendIcon,
    Speed as SpeedIcon,
    Security as SecurityIcon,
    Refresh as RefreshIcon,
    Settings as SettingsIcon,
    ExpandMore as ExpandMoreIcon,
    CheckCircle as CheckCircleIcon,
    Warning as WarningIcon,
    Error as ErrorIcon,
    Info as InfoIcon,
    ThumbUp as ThumbUpIcon,
    ThumbDown as ThumbDownIcon,
    Visibility as VisibilityIcon,
    Comment as CommentIcon,
    Share as ShareIcon,
    Star as StarIcon,
    Timeline as TimelineIcon,
    Dashboard as DashboardIcon,
    AutoAwesome as AutoAwesomeIcon
} from '@mui/icons-material';
import { styled } from '@mui/system';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip as RechartsTooltip, Legend, ResponsiveContainer } from 'recharts';

// Ïä§ÌÉÄÏùºÎìú Ïª¥Ìè¨ÎÑåÌä∏
const StyledCard = styled(Card)(({ theme }) => ({
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
    '&:hover': {
        transform: 'translateY(-4px)',
        boxShadow: theme.shadows[8],
    },
}));

const MetricCard = styled(Card)(({ theme }) => ({
    background: `linear-gradient(135deg, ${theme.palette.primary.main}15, ${theme.palette.secondary.main}15)`,
    border: `1px solid ${theme.palette.primary.main}30`,
    '&:hover': {
        background: `linear-gradient(135deg, ${theme.palette.primary.main}25, ${theme.palette.secondary.main}25)`,
    },
}));

const StatusChip = styled(Chip)<{ status: string }>(({ theme, status }) => ({
    backgroundColor:
        status === 'excellent' ? theme.palette.success.main :
            status === 'good' ? theme.palette.info.main :
                status === 'fair' ? theme.palette.warning.main :
                    theme.palette.error.main,
    color: theme.palette.getContrastText(
        status === 'excellent' ? theme.palette.success.main :
            status === 'good' ? theme.palette.info.main :
                status === 'fair' ? theme.palette.warning.main :
                    theme.palette.error.main
    ),
    fontWeight: 'bold',
}));

// Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò
interface ContentAnalysis {
    id: string;
    timestamp: string;
    content_id: string;
    sentiment: {
        overall_sentiment: string;
        sentiment_score: number;
        confidence: number;
        emotions: Record<string, number>;
    };
    topics: {
        primary_topic: string;
        topic_scores: Record<string, number>;
        confidence: number;
    };
    quality: {
        overall_score: number;
        grade: string;
        metrics: Record<string, number>;
    };
    trend_prediction: {
        trend_score: number;
        viral_potential: number;
        predicted_engagement: Record<string, number>;
    };
    processing_time: number;
}

interface SystemMetrics {
    totalAnalyzed: number;
    totalGenerated: number;
    averageQualityScore: number;
    averageProcessingTime: number;
    successRate: number;
    systemHealth: string;
}

interface TabPanelProps {
    children?: React.ReactNode;
    index: number;
    value: number;
}

function TabPanel(props: TabPanelProps) {
    const { children, value, index, ...other } = props;
    return (
        <div
            role="tabpanel"
            hidden={value !== index}
            id={`dashboard-tabpanel-${index}`}
            aria-labelledby={`dashboard-tab-${index}`}
            {...other}
        >
            {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
        </div>
    );
}

const AutoAgentsContentDashboard: React.FC = () => {
    // ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [currentTab, setCurrentTab] = useState(0);
    const [loading, setLoading] = useState(false);
    const [systemMetrics, setSystemMetrics] = useState<SystemMetrics>({
        totalAnalyzed: 1247,
        totalGenerated: 89,
        averageQualityScore: 0.87,
        averageProcessingTime: 1250,
        successRate: 0.94,
        systemHealth: 'excellent'
    });

    const [recentAnalyses, setRecentAnalyses] = useState<ContentAnalysis[]>([]);
    const [contentInput, setContentInput] = useState({ title: '', content: '' });
    const [analysisResult, setAnalysisResult] = useState<ContentAnalysis | null>(null);
    const [generationPrompt, setGenerationPrompt] = useState('');
    const [generationResult, setGenerationResult] = useState<any>(null);
    const [autoRefresh, setAutoRefresh] = useState(true);
    const [settingsOpen, setSettingsOpen] = useState(false);

    // Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞
    const performanceData = useMemo(() => [
        { time: '00:00', analysis: 45, generation: 12, quality: 0.85 },
        { time: '04:00', analysis: 32, generation: 8, quality: 0.88 },
        { time: '08:00', analysis: 78, generation: 23, quality: 0.91 },
        { time: '12:00', analysis: 156, generation: 45, quality: 0.87 },
        { time: '16:00', analysis: 134, generation: 38, quality: 0.89 },
        { time: '20:00', analysis: 98, generation: 29, quality: 0.86 },
    ], []);

    const sentimentDistribution = useMemo(() => [
        { name: 'Í∏çÏ†ïÏ†Å', value: 65, color: '#4CAF50' },
        { name: 'Ï§ëÎ¶ΩÏ†Å', value: 28, color: '#FF9800' },
        { name: 'Î∂ÄÏ†ïÏ†Å', value: 7, color: '#F44336' },
    ], []);

    const topicDistribution = useMemo(() => [
        { topic: 'AI/Í∏∞Ïà†', count: 234, percentage: 35 },
        { topic: 'Í≤åÏûÑ', count: 189, percentage: 28 },
        { topic: 'Ïä§Ìä∏Î¶¨Î∞ç', count: 145, percentage: 22 },
        { topic: 'Ïª§ÎÆ§ÎãàÌã∞', count: 98, percentage: 15 },
    ], []);

    // API Ìò∏Ï∂ú Ìï®ÏàòÎì§
    const analyzeContent = useCallback(async () => {
        if (!contentInput.title || !contentInput.content) {
            alert('Ï†úÎ™©Í≥º ÎÇ¥Ïö©ÏùÑ Î™®Îëê ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        setLoading(true);
        try {
            const response = await fetch('/api/autoagents-content/analyze', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: contentInput })
            });

            const result = await response.json();
            if (result.success) {
                setAnalysisResult(result.data);
                setRecentAnalyses(prev => [result.data, ...prev.slice(0, 9)]);
            }
        } catch (error) {
            console.error('Î∂ÑÏÑù Ïò§Î•ò:', error);
        } finally {
            setLoading(false);
        }
    }, [contentInput]);

    const generateContent = useCallback(async () => {
        if (!generationPrompt) {
            alert('ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        setLoading(true);
        try {
            const response = await fetch('/api/autoagents-content/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    prompt: generationPrompt,
                    options: { type: 'article', quality: 'high' }
                })
            });

            const result = await response.json();
            if (result.success) {
                setGenerationResult(result.data);
            }
        } catch (error) {
            console.error('ÏÉùÏÑ± Ïò§Î•ò:', error);
        } finally {
            setLoading(false);
        }
    }, [generationPrompt]);

    const refreshSystemStatus = useCallback(async () => {
        try {
            const response = await fetch('/api/autoagents-content/status');
            const result = await response.json();
            if (result.success) {
                setSystemMetrics(result.data.performance.metrics);
            }
        } catch (error) {
            console.error('ÏÉÅÌÉú Ï°∞Ìöå Ïò§Î•ò:', error);
        }
    }, []);

    // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®
    useEffect(() => {
        if (autoRefresh) {
            const interval = setInterval(refreshSystemStatus, 30000); // 30Ï¥àÎßàÎã§
            return () => clearInterval(interval);
        }
    }, [autoRefresh, refreshSystemStatus]);

    // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    useEffect(() => {
        refreshSystemStatus();
    }, [refreshSystemStatus]);

    return (
        <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
            {/* Ìó§Îçî */}
            <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
                <Box>
                    <Typography variant="h3" component="h1" gutterBottom sx={{
                        fontWeight: 700,
                        background: 'linear-gradient(45deg, #2196F3, #21CBF3)',
                        backgroundClip: 'text',
                        WebkitBackgroundClip: 'text',
                        WebkitTextFillColor: 'transparent'
                    }}>
                        ü§ñ AUTOAGENTS Ïª®ÌÖêÏ∏† ÎåÄÏãúÎ≥¥Îìú
                    </Typography>
                    <Typography variant="h6" color="text.secondary">
                        AI Í∏∞Î∞ò ÏßÄÎä•Ìòï Ïª®ÌÖêÏ∏† Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
                    </Typography>
                </Box>
                <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
                    <FormControlLabel
                        control={
                            <Switch
                                checked={autoRefresh}
                                onChange={(e) => setAutoRefresh(e.target.checked)}
                                color="primary"
                            />
                        }
                        label="ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ®"
                    />
                    <IconButton onClick={refreshSystemStatus} color="primary">
                        <RefreshIcon />
                    </IconButton>
                    <IconButton onClick={() => setSettingsOpen(true)} color="primary">
                        <SettingsIcon />
                    </IconButton>
                </Box>
            </Box>

            {/* ÏãúÏä§ÌÖú ÏÉÅÌÉú Ïπ¥Îìú */}
            <Grid container spacing={3} sx={{ mb: 4 }}>
                <Grid item xs={12} sm={6} md={2.4}>
                    <MetricCard>
                        <CardContent sx={{ textAlign: 'center' }}>
                            <AnalyticsIcon sx={{ fontSize: 40, color: 'primary.main', mb: 1 }} />
                            <Typography variant="h4" component="div" sx={{ fontWeight: 'bold' }}>
                                {systemMetrics.totalAnalyzed.toLocaleString()}
                            </Typography>
                            <Typography color="text.secondary">
                                Ï¥ù Î∂ÑÏÑù Í±¥Ïàò
                            </Typography>
                        </CardContent>
                    </MetricCard>
                </Grid>

                <Grid item xs={12} sm={6} md={2.4}>
                    <MetricCard>
                        <CardContent sx={{ textAlign: 'center' }}>
                            <AutoAwesomeIcon sx={{ fontSize: 40, color: 'secondary.main', mb: 1 }} />
                            <Typography variant="h4" component="div" sx={{ fontWeight: 'bold' }}>
                                {systemMetrics.totalGenerated}
                            </Typography>
                            <Typography color="text.secondary">
                                ÏÉùÏÑ±Îêú Ïª®ÌÖêÏ∏†
                            </Typography>
                        </CardContent>
                    </MetricCard>
                </Grid>

                <Grid item xs={12} sm={6} md={2.4}>
                    <MetricCard>
                        <CardContent sx={{ textAlign: 'center' }}>
                            <StarIcon sx={{ fontSize: 40, color: 'warning.main', mb: 1 }} />
                            <Typography variant="h4" component="div" sx={{ fontWeight: 'bold' }}>
                                {(systemMetrics.averageQualityScore * 100).toFixed(1)}%
                            </Typography>
                            <Typography color="text.secondary">
                                ÌèâÍ∑† ÌíàÏßà Ï†êÏàò
                            </Typography>
                        </CardContent>
                    </MetricCard>
                </Grid>

                <Grid item xs={12} sm={6} md={2.4}>
                    <MetricCard>
                        <CardContent sx={{ textAlign: 'center' }}>
                            <SpeedIcon sx={{ fontSize: 40, color: 'info.main', mb: 1 }} />
                            <Typography variant="h4" component="div" sx={{ fontWeight: 'bold' }}>
                                {systemMetrics.averageProcessingTime}ms
                            </Typography>
                            <Typography color="text.secondary">
                                ÌèâÍ∑† Ï≤òÎ¶¨ ÏãúÍ∞Ñ
                            </Typography>
                        </CardContent>
                    </MetricCard>
                </Grid>

                <Grid item xs={12} sm={6} md={2.4}>
                    <MetricCard>
                        <CardContent sx={{ textAlign: 'center' }}>
                            <CheckCircleIcon sx={{ fontSize: 40, color: 'success.main', mb: 1 }} />
                            <StatusChip
                                status={systemMetrics.systemHealth}
                                label={systemMetrics.systemHealth.toUpperCase()}
                                size="small"
                                sx={{ mb: 1 }}
                            />
                            <Typography color="text.secondary">
                                ÏãúÏä§ÌÖú ÏÉÅÌÉú
                            </Typography>
                        </CardContent>
                    </MetricCard>
                </Grid>
            </Grid>

            {/* Î©îÏù∏ ÌÉ≠ */}
            <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
                <Tabs value={currentTab} onChange={(e, newValue) => setCurrentTab(newValue)}>
                    <Tab icon={<DashboardIcon />} label="ÎåÄÏãúÎ≥¥Îìú" />
                    <Tab icon={<AnalyticsIcon />} label="Ïª®ÌÖêÏ∏† Î∂ÑÏÑù" />
                    <Tab icon={<AutoFixIcon />} label="Ïª®ÌÖêÏ∏† ÏÉùÏÑ±" />
                    <Tab icon={<RecommendIcon />} label="Í∞úÏù∏Ìôî Ï∂îÏ≤ú" />
                    <Tab icon={<TrendingIcon />} label="Ìä∏Î†åÎìú Î∂ÑÏÑù" />
                    <Tab icon={<AssessmentIcon />} label="ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ" />
                </Tabs>
            </Box>

            {/* ÎåÄÏãúÎ≥¥Îìú ÌÉ≠ */}
            <TabPanel value={currentTab} index={0}>
                <Grid container spacing={3}>
                    {/* Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Ï∞®Ìä∏ */}
                    <Grid item xs={12} lg={8}>
                        <StyledCard>
                            <CardHeader
                                title="Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ"
                                subheader="ÏßÄÎÇú 24ÏãúÍ∞Ñ ÎèôÏïàÏùò ÏãúÏä§ÌÖú ÌôúÎèô"
                                action={
                                    <Chip
                                        icon={<TimelineIcon />}
                                        label="Ïã§ÏãúÍ∞Ñ"
                                        color="primary"
                                        variant="outlined"
                                    />
                                }
                            />
                            <CardContent>
                                <ResponsiveContainer width="100%" height={300}>
                                    <LineChart data={performanceData}>
                                        <CartesianGrid strokeDasharray="3 3" />
                                        <XAxis dataKey="time" />
                                        <YAxis />
                                        <RechartsTooltip />
                                        <Legend />
                                        <Line
                                            type="monotone"
                                            dataKey="analysis"
                                            stroke="#2196F3"
                                            strokeWidth={2}
                                            name="Î∂ÑÏÑù Í±¥Ïàò"
                                        />
                                        <Line
                                            type="monotone"
                                            dataKey="generation"
                                            stroke="#FF9800"
                                            strokeWidth={2}
                                            name="ÏÉùÏÑ± Í±¥Ïàò"
                                        />
                                    </LineChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </StyledCard>
                    </Grid>

                    {/* Í∞êÏ†ï Î∂ÑÌè¨ */}
                    <Grid item xs={12} lg={4}>
                        <StyledCard>
                            <CardHeader title="Í∞êÏ†ï Î∂ÑÏÑù Î∂ÑÌè¨" />
                            <CardContent>
                                <ResponsiveContainer width="100%" height={300}>
                                    <PieChart>
                                        <Pie
                                            data={sentimentDistribution}
                                            cx="50%"
                                            cy="50%"
                                            innerRadius={60}
                                            outerRadius={100}
                                            dataKey="value"
                                        >
                                            {sentimentDistribution.map((entry, index) => (
                                                <Cell key={`cell-${index}`} fill={entry.color} />
                                            ))}
                                        </Pie>
                                        <RechartsTooltip />
                                        <Legend />
                                    </PieChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </StyledCard>
                    </Grid>

                    {/* ÌÜ†ÌîΩ Î∂ÑÌè¨ */}
                    <Grid item xs={12}>
                        <StyledCard>
                            <CardHeader title="Ïù∏Í∏∞ ÌÜ†ÌîΩ Î∂ÑÏÑù" />
                            <CardContent>
                                <ResponsiveContainer width="100%" height={250}>
                                    <BarChart data={topicDistribution}>
                                        <CartesianGrid strokeDasharray="3 3" />
                                        <XAxis dataKey="topic" />
                                        <YAxis />
                                        <RechartsTooltip />
                                        <Bar dataKey="count" fill="#4CAF50" />
                                    </BarChart>
                                </ResponsiveContainer>
                            </CardContent>
                        </StyledCard>
                    </Grid>
                </Grid>
            </TabPanel>

            {/* Ïª®ÌÖêÏ∏† Î∂ÑÏÑù ÌÉ≠ */}
            <TabPanel value={currentTab} index={1}>
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <StyledCard>
                            <CardHeader title="Ïª®ÌÖêÏ∏† Î∂ÑÏÑù" />
                            <CardContent>
                                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                    <TextField
                                        label="Ï†úÎ™©"
                                        value={contentInput.title}
                                        onChange={(e) => setContentInput(prev => ({ ...prev, title: e.target.value }))}
                                        fullWidth
                                    />
                                    <TextField
                                        label="ÎÇ¥Ïö©"
                                        value={contentInput.content}
                                        onChange={(e) => setContentInput(prev => ({ ...prev, content: e.target.value }))}
                                        multiline
                                        rows={6}
                                        fullWidth
                                    />
                                    <Button
                                        variant="contained"
                                        onClick={analyzeContent}
                                        disabled={loading}
                                        startIcon={loading ? <CircularProgress size={20} /> : <AnalyticsIcon />}
                                    >
                                        {loading ? 'Î∂ÑÏÑù Ï§ë...' : 'AI Î∂ÑÏÑù ÏãúÏûë'}
                                    </Button>
                                </Box>
                            </CardContent>
                        </StyledCard>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        {analysisResult && (
                            <StyledCard>
                                <CardHeader title="Î∂ÑÏÑù Í≤∞Í≥º" />
                                <CardContent>
                                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                        {/* Í∞êÏ†ï Î∂ÑÏÑù */}
                                        <Box>
                                            <Typography variant="subtitle2" gutterBottom>
                                                Í∞êÏ†ï Î∂ÑÏÑù
                                            </Typography>
                                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                                                <Chip
                                                    label={analysisResult.sentiment.overall_sentiment}
                                                    color={
                                                        analysisResult.sentiment.overall_sentiment === 'positive' ? 'success' :
                                                            analysisResult.sentiment.overall_sentiment === 'negative' ? 'error' : 'default'
                                                    }
                                                />
                                                <Typography variant="body2">
                                                    Ï†êÏàò: {(analysisResult.sentiment.sentiment_score * 100).toFixed(1)}%
                                                </Typography>
                                            </Box>
                                        </Box>

                                        {/* ÌíàÏßà ÌèâÍ∞Ä */}
                                        <Box>
                                            <Typography variant="subtitle2" gutterBottom>
                                                ÌíàÏßà ÌèâÍ∞Ä
                                            </Typography>
                                            <LinearProgress
                                                variant="determinate"
                                                value={analysisResult.quality.overall_score * 100}
                                                sx={{ mb: 1 }}
                                            />
                                            <Typography variant="body2">
                                                Îì±Í∏â: {analysisResult.quality.grade} ({(analysisResult.quality.overall_score * 100).toFixed(1)}%)
                                            </Typography>
                                        </Box>

                                        {/* Ìä∏Î†åÎìú ÏòàÏ∏° */}
                                        <Box>
                                            <Typography variant="subtitle2" gutterBottom>
                                                Ìä∏Î†åÎìú ÏòàÏ∏°
                                            </Typography>
                                            <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                                                <Chip
                                                    size="small"
                                                    icon={<TrendingIcon />}
                                                    label={`Ìä∏Î†åÎìú: ${(analysisResult.trend_prediction.trend_score * 100).toFixed(0)}%`}
                                                />
                                                <Chip
                                                    size="small"
                                                    icon={<VisibilityIcon />}
                                                    label={`ÏòàÏÉÅ Ï°∞Ìöå: ${analysisResult.trend_prediction.predicted_engagement.views}`}
                                                />
                                            </Box>
                                        </Box>
                                    </Box>
                                </CardContent>
                            </StyledCard>
                        )}
                    </Grid>
                </Grid>
            </TabPanel>

            {/* Ïª®ÌÖêÏ∏† ÏÉùÏÑ± ÌÉ≠ */}
            <TabPanel value={currentTab} index={2}>
                <Grid container spacing={3}>
                    <Grid item xs={12} md={6}>
                        <StyledCard>
                            <CardHeader title="AI Ïª®ÌÖêÏ∏† ÏÉùÏÑ±" />
                            <CardContent>
                                <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                    <TextField
                                        label="ÏÉùÏÑ± ÌîÑÎ°¨ÌîÑÌä∏"
                                        value={generationPrompt}
                                        onChange={(e) => setGenerationPrompt(e.target.value)}
                                        multiline
                                        rows={4}
                                        fullWidth
                                        placeholder="Ïòà: AI Í∏∞Î∞ò Ïª®ÌÖêÏ∏† Î∂ÑÏÑù ÏãúÏä§ÌÖúÏóê ÎåÄÌïú Î∏îÎ°úÍ∑∏ Í∏ÄÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."
                                    />
                                    <Button
                                        variant="contained"
                                        onClick={generateContent}
                                        disabled={loading}
                                        startIcon={loading ? <CircularProgress size={20} /> : <AutoFixIcon />}
                                    >
                                        {loading ? 'ÏÉùÏÑ± Ï§ë...' : 'AI Ïª®ÌÖêÏ∏† ÏÉùÏÑ±'}
                                    </Button>
                                </Box>
                            </CardContent>
                        </StyledCard>
                    </Grid>

                    <Grid item xs={12} md={6}>
                        {generationResult && (
                            <StyledCard>
                                <CardHeader title="ÏÉùÏÑ± Í≤∞Í≥º" />
                                <CardContent>
                                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>
                                        <Alert severity={generationResult.approved ? 'success' : 'warning'}>
                                            <AlertTitle>
                                                {generationResult.approved ? 'ÏäπÏù∏Îê®' : 'Í≤ÄÌÜ† ÌïÑÏöî'}
                                            </AlertTitle>
                                            ÌíàÏßà Ï†êÏàò: {(generationResult.quality_assessment.overall_score * 100).toFixed(1)}%
                                        </Alert>

                                        <Typography variant="subtitle2">
                                            ÏÉùÏÑ±Îêú Ï†úÎ™©:
                                        </Typography>
                                        <Typography variant="body1" sx={{ fontWeight: 'bold' }}>
                                            {generationResult.generated_content.title}
                                        </Typography>

                                        <Typography variant="subtitle2">
                                            ÏÉùÏÑ±Îêú ÎÇ¥Ïö© (ÎØ∏Î¶¨Î≥¥Í∏∞):
                                        </Typography>
                                        <Typography variant="body2" sx={{
                                            maxHeight: 200,
                                            overflow: 'auto',
                                            p: 2,
                                            bgcolor: 'grey.50',
                                            borderRadius: 1
                                        }}>
                                            {generationResult.generated_content.content.substring(0, 500)}...
                                        </Typography>
                                    </Box>
                                </CardContent>
                            </StyledCard>
                        )}
                    </Grid>
                </Grid>
            </TabPanel>

            {/* Í∞úÏù∏Ìôî Ï∂îÏ≤ú ÌÉ≠ */}
            <TabPanel value={currentTab} index={3}>
                <Alert severity="info" sx={{ mb: 3 }}>
                    <AlertTitle>Í∞úÏù∏Ìôî Ï∂îÏ≤ú ÏãúÏä§ÌÖú</AlertTitle>
                    ÏÇ¨Ïö©ÏûêÎ≥Ñ ÎßûÏ∂§ Ïª®ÌÖêÏ∏† Ï∂îÏ≤ú Í∏∞Îä•Ïù¥ Í≥ß Ï†úÍ≥µÎê† ÏòàÏ†ïÏûÖÎãàÎã§.
                </Alert>
            </TabPanel>

            {/* Ìä∏Î†åÎìú Î∂ÑÏÑù ÌÉ≠ */}
            <TabPanel value={currentTab} index={4}>
                <Alert severity="info" sx={{ mb: 3 }}>
                    <AlertTitle>Ìä∏Î†åÎìú Î∂ÑÏÑù</AlertTitle>
                    Ïã§ÏãúÍ∞Ñ Ìä∏Î†åÎìú Î∂ÑÏÑù Î∞è ÏòàÏ∏° Í∏∞Îä•Ïù¥ Í≥ß Ï†úÍ≥µÎê† ÏòàÏ†ïÏûÖÎãàÎã§.
                </Alert>
            </TabPanel>

            {/* ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÌÉ≠ */}
            <TabPanel value={currentTab} index={5}>
                <Grid container spacing={3}>
                    <Grid item xs={12}>
                        <StyledCard>
                            <CardHeader title="ÏãúÏä§ÌÖú ÏÑ±Îä• ÏßÄÌëú" />
                            <CardContent>
                                <TableContainer>
                                    <Table>
                                        <TableHead>
                                            <TableRow>
                                                <TableCell>ÏßÄÌëú</TableCell>
                                                <TableCell align="right">ÌòÑÏû¨Í∞í</TableCell>
                                                <TableCell align="right">Î™©ÌëúÍ∞í</TableCell>
                                                <TableCell align="right">ÏÉÅÌÉú</TableCell>
                                            </TableRow>
                                        </TableHead>
                                        <TableBody>
                                            <TableRow>
                                                <TableCell>ÌèâÍ∑† ÏùëÎãµ ÏãúÍ∞Ñ</TableCell>
                                                <TableCell align="right">{systemMetrics.averageProcessingTime}ms</TableCell>
                                                <TableCell align="right">1000ms</TableCell>
                                                <TableCell align="right">
                                                    <StatusChip
                                                        status={systemMetrics.averageProcessingTime < 1000 ? 'excellent' : 'fair'}
                                                        label={systemMetrics.averageProcessingTime < 1000 ? 'Ïö∞Ïàò' : 'Î≥¥ÌÜµ'}
                                                        size="small"
                                                    />
                                                </TableCell>
                                            </TableRow>
                                            <TableRow>
                                                <TableCell>ÏÑ±Í≥µÎ•†</TableCell>
                                                <TableCell align="right">{(systemMetrics.successRate * 100).toFixed(1)}%</TableCell>
                                                <TableCell align="right">95%</TableCell>
                                                <TableCell align="right">
                                                    <StatusChip
                                                        status={systemMetrics.successRate > 0.95 ? 'excellent' : 'good'}
                                                        label={systemMetrics.successRate > 0.95 ? 'Ïö∞Ïàò' : 'ÏñëÌò∏'}
                                                        size="small"
                                                    />
                                                </TableCell>
                                            </TableRow>
                                        </TableBody>
                                    </Table>
                                </TableContainer>
                            </CardContent>
                        </StyledCard>
                    </Grid>
                </Grid>
            </TabPanel>

            {/* ÏÑ§Ï†ï Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
            <Dialog open={settingsOpen} onClose={() => setSettingsOpen(false)} maxWidth="sm" fullWidth>
                <DialogTitle>ÏãúÏä§ÌÖú ÏÑ§Ï†ï</DialogTitle>
                <DialogContent>
                    <Box sx={{ pt: 2 }}>
                        <FormControlLabel
                            control={<Switch defaultChecked />}
                            label="Ïã§ÏãúÍ∞Ñ Î∂ÑÏÑù ÌôúÏÑ±Ìôî"
                        />
                        <FormControlLabel
                            control={<Switch defaultChecked />}
                            label="ÏûêÎèô ÏµúÏ†ÅÌôî"
                        />
                        <FormControlLabel
                            control={<Switch defaultChecked />}
                            label="Í∞úÏù∏Ìôî Ï∂îÏ≤ú"
                        />
                    </Box>
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setSettingsOpen(false)}>Ï∑®ÏÜå</Button>
                    <Button variant="contained" onClick={() => setSettingsOpen(false)}>Ï†ÄÏû•</Button>
                </DialogActions>
            </Dialog>
        </Container>
    );
};

export default AutoAgentsContentDashboard;
