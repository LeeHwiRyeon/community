/**
 * üìö Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
 * 
 * Git ÏàòÏ§ÄÏùò Î≤ÑÏ†Ñ Í¥ÄÎ¶¨, Î∏åÎûúÏπò, Î®∏ÏßÄ, ÌûàÏä§ÌÜ†Î¶¨Î•º ÏßÄÏõêÌïòÎäî
 * Í≥†Í∏â Î¨∏ÏÑú Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú
 * 
 * @author AUTOAGENTS Manager
 * @version 3.0.0
 * @created 2025-10-02
 */

import React, {
    useState,
    useEffect,
    useCallback,
    useMemo,
    createContext,
    useContext,
    ReactNode
} from 'react';
import {
    Box,
    Paper,
    Typography,
    Button,
    IconButton,
    Dialog,
    DialogTitle,
    DialogContent,
    DialogActions,
    TextField,
    List,
    ListItem,
    ListItemText,
    ListItemAvatar,
    ListItemSecondaryAction,
    Avatar,
    Chip,
    Divider,
    // Timeline components (using alternative layout)
    // Timeline,
    // TimelineItem,
    // TimelineSeparator,
    // TimelineConnector,
    // TimelineContent,
    // TimelineDot,
    Card,
    CardContent,
    CardActions,
    Menu,
    MenuItem,
    Tooltip,
    Alert,
    LinearProgress,
    Badge,
    useTheme
} from '@mui/material';
import {
    History as HistoryIcon,
    Save as SaveIcon,
    Restore as RestoreIcon,
    Compare as CompareIcon,
    AccountTree as BranchIcon,
    Merge as MergeIcon,
    Tag as TagIcon,
    Person as PersonIcon,
    Schedule as ScheduleIcon,
    Edit as EditIcon,
    Delete as DeleteIcon,
    Add as AddIcon,
    Check as CheckIcon,
    Close as CloseIcon,
    Warning as WarningIcon,
    Info as InfoIcon,
    CloudDownload as DownloadIcon,
    CloudUpload as UploadIcon,
    Sync as SyncIcon,
    CallSplit as ForkIcon,
    Timeline as TimelineIcon
} from '@mui/icons-material';
import { styled } from '@mui/system';

// Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ ÌÉÄÏûÖ Ï†ïÏùò
export interface DocumentVersion {
    id: string;
    version: string;
    title: string;
    description: string;
    author: {
        id: string;
        name: string;
        avatar?: string;
    };
    timestamp: Date;
    content: any; // Ïã§Ï†ú Î¨∏ÏÑú ÎÇ¥Ïö©
    metadata: {
        wordCount: number;
        blockCount: number;
        changes: VersionChange[];
        tags: string[];
        branch: string;
        parentVersion?: string;
        mergedFrom?: string[];
    };
    status: 'draft' | 'published' | 'archived';
    isAutoSave: boolean;
}

export interface VersionChange {
    type: 'added' | 'modified' | 'deleted';
    blockId: string;
    description: string;
    oldContent?: string;
    newContent?: string;
}

export interface Branch {
    id: string;
    name: string;
    description: string;
    author: string;
    createdAt: Date;
    lastCommit: string;
    isActive: boolean;
    isProtected: boolean;
    mergeRequests: MergeRequest[];
}

export interface MergeRequest {
    id: string;
    title: string;
    description: string;
    sourceBranch: string;
    targetBranch: string;
    author: string;
    createdAt: Date;
    status: 'open' | 'merged' | 'closed' | 'conflict';
    reviewers: string[];
    conflicts?: ConflictInfo[];
}

export interface ConflictInfo {
    blockId: string;
    type: 'content' | 'deletion' | 'addition';
    sourceContent: string;
    targetContent: string;
    resolution?: 'source' | 'target' | 'manual';
    manualContent?: string;
}

interface VersionControlContextValue {
    versions: DocumentVersion[];
    branches: Branch[];
    currentVersion: DocumentVersion | null;
    currentBranch: string;
    isLoading: boolean;

    // Î≤ÑÏ†Ñ Í¥ÄÎ¶¨
    saveVersion: (title: string, description: string, isAutoSave?: boolean) => Promise<string>;
    restoreVersion: (versionId: string) => Promise<void>;
    deleteVersion: (versionId: string) => void;
    compareVersions: (version1Id: string, version2Id: string) => VersionChange[];

    // Î∏åÎûúÏπò Í¥ÄÎ¶¨
    createBranch: (name: string, description: string, fromVersion?: string) => Promise<string>;
    switchBranch: (branchName: string) => Promise<void>;
    deleteBranch: (branchId: string) => void;

    // Î®∏ÏßÄ Í¥ÄÎ¶¨
    createMergeRequest: (title: string, description: string, sourceBranch: string, targetBranch: string) => Promise<string>;
    mergeBranch: (mergeRequestId: string, resolveConflicts?: ConflictInfo[]) => Promise<void>;

    // ÌÉúÍ∑∏ Í¥ÄÎ¶¨
    createTag: (versionId: string, name: string, description: string) => void;

    // ÎÇ¥Î≥¥ÎÇ¥Í∏∞/Í∞ÄÏ†∏Ïò§Í∏∞
    exportVersion: (versionId: string) => Promise<Blob>;
    importVersion: (file: File) => Promise<string>;
}

// Ïä§ÌÉÄÏùºÎìú Ïª¥Ìè¨ÎÑåÌä∏
const VersionControlPanel = styled(Paper)(({ theme }) => ({
    height: '100%',
    display: 'flex',
    flexDirection: 'column',
    overflow: 'hidden'
}));

const VersionItem = styled(Card)<{ isActive?: boolean }>(({ theme, isActive }) => ({
    marginBottom: theme.spacing(1),
    border: isActive ? `2px solid ${theme.palette.primary.main}` : `1px solid ${theme.palette.divider}`,
    backgroundColor: isActive ? theme.palette.primary.light + '10' : theme.palette.background.paper,
    cursor: 'pointer',
    transition: 'all 0.2s ease',

    '&:hover': {
        boxShadow: theme.shadows[4],
        transform: 'translateY(-2px)'
    }
}));

const BranchChip = styled(Chip)<{ isActive?: boolean }>(({ theme, isActive }) => ({
    backgroundColor: isActive ? theme.palette.primary.main : theme.palette.grey[300],
    color: isActive ? theme.palette.primary.contrastText : theme.palette.text.primary,
    fontWeight: isActive ? 'bold' : 'normal'
}));

const ChangeIndicator = styled(Box)<{ changeType: VersionChange['type'] }>(({ theme, changeType }) => ({
    width: 8,
    height: 8,
    borderRadius: '50%',
    backgroundColor:
        changeType === 'added' ? theme.palette.success.main :
            changeType === 'modified' ? theme.palette.warning.main :
                theme.palette.error.main,
    display: 'inline-block',
    marginRight: theme.spacing(1)
}));

const ConflictResolutionBox = styled(Box)(({ theme }) => ({
    border: `1px solid ${theme.palette.warning.main}`,
    borderRadius: theme.shape.borderRadius,
    padding: theme.spacing(2),
    backgroundColor: theme.palette.warning.light + '20',
    marginBottom: theme.spacing(2)
}));

// Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ Ïª®ÌÖçÏä§Ìä∏
const VersionControlContext = createContext<VersionControlContextValue | undefined>(undefined);

// Ïª§Ïä§ÌÖÄ ÌõÖ
export const useVersionControl = (): VersionControlContextValue => {
    const context = useContext(VersionControlContext);
    if (!context) {
        throw new Error('useVersionControl must be used within VersionControlProvider');
    }
    return context;
};

// Î≤ÑÏ†Ñ Í¥ÄÎ¶¨ ÌîÑÎ°úÎ∞îÏù¥Îçî
interface VersionControlProviderProps {
    children: ReactNode;
    documentId: string;
}

export const VersionControlProvider: React.FC<VersionControlProviderProps> = ({
    children,
    documentId
}) => {
    const [versions, setVersions] = useState<DocumentVersion[]>([]);
    const [branches, setBranches] = useState<Branch[]>([
        {
            id: 'main',
            name: 'main',
            description: 'Î©îÏù∏ Î∏åÎûúÏπò',
            author: 'system',
            createdAt: new Date(),
            lastCommit: 'v1.0.0',
            isActive: true,
            isProtected: true,
            mergeRequests: []
        }
    ]);
    const [currentVersion, setCurrentVersion] = useState<DocumentVersion | null>(null);
    const [currentBranch, setCurrentBranch] = useState('main');
    const [isLoading, setIsLoading] = useState(false);

    // Ï¥àÍ∏∞ Î≤ÑÏ†Ñ ÏÉùÏÑ±
    useEffect(() => {
        const initialVersion: DocumentVersion = {
            id: 'v1.0.0',
            version: '1.0.0',
            title: 'Ï¥àÍ∏∞ Î≤ÑÏ†Ñ',
            description: 'Î¨∏ÏÑúÏùò Ï≤´ Î≤àÏß∏ Î≤ÑÏ†Ñ',
            author: {
                id: 'current-user',
                name: 'ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê'
            },
            timestamp: new Date(),
            content: {},
            metadata: {
                wordCount: 0,
                blockCount: 0,
                changes: [],
                tags: ['initial'],
                branch: 'main'
            },
            status: 'draft',
            isAutoSave: false
        };

        setVersions([initialVersion]);
        setCurrentVersion(initialVersion);
    }, []);

    // Î≤ÑÏ†Ñ Ï†ÄÏû•
    const saveVersion = useCallback(async (title: string, description: string, isAutoSave = false) => {
        setIsLoading(true);

        try {
            const versionNumber = `${versions.length + 1}.0.0`;
            const newVersion: DocumentVersion = {
                id: `v${versionNumber}`,
                version: versionNumber,
                title,
                description,
                author: {
                    id: 'current-user',
                    name: 'ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê'
                },
                timestamp: new Date(),
                content: {}, // Ïã§Ï†ú Ïª®ÌÖêÏ∏†Îäî ÏóêÎîîÌÑ∞ÏóêÏÑú Í∞ÄÏ†∏Ïò¥
                metadata: {
                    wordCount: Math.floor(Math.random() * 1000) + 100,
                    blockCount: Math.floor(Math.random() * 20) + 5,
                    changes: [
                        {
                            type: 'modified',
                            blockId: 'block-1',
                            description: 'ÌÖçÏä§Ìä∏ ÏàòÏ†ï',
                            oldContent: 'Ïù¥Ï†Ñ ÎÇ¥Ïö©',
                            newContent: 'ÏÉàÎ°úÏö¥ ÎÇ¥Ïö©'
                        }
                    ],
                    tags: isAutoSave ? ['auto-save'] : [],
                    branch: currentBranch,
                    parentVersion: currentVersion?.id
                },
                status: 'draft',
                isAutoSave
            };

            setVersions(prev => [newVersion, ...prev]);
            setCurrentVersion(newVersion);

            // Î∏åÎûúÏπò ÏóÖÎç∞Ïù¥Ìä∏
            setBranches(prev => prev.map(branch =>
                branch.name === currentBranch
                    ? { ...branch, lastCommit: newVersion.id }
                    : branch
            ));

            return newVersion.id;
        } finally {
            setIsLoading(false);
        }
    }, [versions.length, currentVersion, currentBranch]);

    // Î≤ÑÏ†Ñ Î≥µÏõê
    const restoreVersion = useCallback(async (versionId: string) => {
        setIsLoading(true);

        try {
            const version = versions.find(v => v.id === versionId);
            if (version) {
                setCurrentVersion(version);
                // Ïã§Ï†úÎ°úÎäî ÏóêÎîîÌÑ∞ Ïª®ÌÖêÏ∏†ÎèÑ Î≥µÏõê
            }
        } finally {
            setIsLoading(false);
        }
    }, [versions]);

    // Î≤ÑÏ†Ñ ÏÇ≠Ï†ú
    const deleteVersion = useCallback((versionId: string) => {
        setVersions(prev => prev.filter(v => v.id !== versionId));

        if (currentVersion?.id === versionId) {
            const remainingVersions = versions.filter(v => v.id !== versionId);
            setCurrentVersion(remainingVersions[0] || null);
        }
    }, [versions, currentVersion]);

    // Î≤ÑÏ†Ñ ÎπÑÍµê
    const compareVersions = useCallback((version1Id: string, version2Id: string) => {
        const version1 = versions.find(v => v.id === version1Id);
        const version2 = versions.find(v => v.id === version2Id);

        if (!version1 || !version2) return [];

        // Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî diff ÏïåÍ≥†Î¶¨Ï¶ò ÏÇ¨Ïö©
        return [
            {
                type: 'modified' as const,
                blockId: 'block-1',
                description: 'ÎÇ¥Ïö© Î≥ÄÍ≤Ω',
                oldContent: 'Ïù¥Ï†Ñ ÎÇ¥Ïö©',
                newContent: 'ÏÉàÎ°úÏö¥ ÎÇ¥Ïö©'
            }
        ];
    }, [versions]);

    // Î∏åÎûúÏπò ÏÉùÏÑ±
    const createBranch = useCallback(async (name: string, description: string, fromVersion?: string) => {
        const newBranch: Branch = {
            id: `branch-${Date.now()}`,
            name,
            description,
            author: 'current-user',
            createdAt: new Date(),
            lastCommit: fromVersion || currentVersion?.id || '',
            isActive: false,
            isProtected: false,
            mergeRequests: []
        };

        setBranches(prev => [...prev, newBranch]);
        return newBranch.id;
    }, [currentVersion]);

    // Î∏åÎûúÏπò Ï†ÑÌôò
    const switchBranch = useCallback(async (branchName: string) => {
        setCurrentBranch(branchName);

        // Î∏åÎûúÏπòÏùò ÏµúÏã† Ïª§Î∞ãÏúºÎ°ú Ïù¥Îèô
        const branch = branches.find(b => b.name === branchName);
        if (branch && branch.lastCommit) {
            const version = versions.find(v => v.id === branch.lastCommit);
            if (version) {
                setCurrentVersion(version);
            }
        }

        setBranches(prev => prev.map(b => ({
            ...b,
            isActive: b.name === branchName
        })));
    }, [branches, versions]);

    // Î∏åÎûúÏπò ÏÇ≠Ï†ú
    const deleteBranch = useCallback((branchId: string) => {
        setBranches(prev => prev.filter(b => b.id !== branchId));
    }, []);

    // Î®∏ÏßÄ ÏöîÏ≤≠ ÏÉùÏÑ±
    const createMergeRequest = useCallback(async (
        title: string,
        description: string,
        sourceBranch: string,
        targetBranch: string
    ) => {
        const mergeRequest: MergeRequest = {
            id: `mr-${Date.now()}`,
            title,
            description,
            sourceBranch,
            targetBranch,
            author: 'current-user',
            createdAt: new Date(),
            status: 'open',
            reviewers: []
        };

        setBranches(prev => prev.map(branch =>
            branch.name === targetBranch
                ? { ...branch, mergeRequests: [...branch.mergeRequests, mergeRequest] }
                : branch
        ));

        return mergeRequest.id;
    }, []);

    // Î∏åÎûúÏπò Î®∏ÏßÄ
    const mergeBranch = useCallback(async (mergeRequestId: string, resolveConflicts?: ConflictInfo[]) => {
        // Ïã§Ï†ú Î®∏ÏßÄ Î°úÏßÅ Íµ¨ÌòÑ
        setBranches(prev => prev.map(branch => ({
            ...branch,
            mergeRequests: branch.mergeRequests.map(mr =>
                mr.id === mergeRequestId
                    ? { ...mr, status: 'merged' as const }
                    : mr
            )
        })));
    }, []);

    // ÌÉúÍ∑∏ ÏÉùÏÑ±
    const createTag = useCallback((versionId: string, name: string, description: string) => {
        setVersions(prev => prev.map(version =>
            version.id === versionId
                ? {
                    ...version,
                    metadata: {
                        ...version.metadata,
                        tags: [...version.metadata.tags, name]
                    }
                }
                : version
        ));
    }, []);

    // Î≤ÑÏ†Ñ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
    const exportVersion = useCallback(async (versionId: string) => {
        const version = versions.find(v => v.id === versionId);
        if (!version) throw new Error('Version not found');

        const data = JSON.stringify(version, null, 2);
        return new Blob([data], { type: 'application/json' });
    }, [versions]);

    // Î≤ÑÏ†Ñ Í∞ÄÏ†∏Ïò§Í∏∞
    const importVersion = useCallback(async (file: File) => {
        const text = await file.text();
        const importedVersion = JSON.parse(text) as DocumentVersion;

        // ID Ï§ëÎ≥µ Î∞©ÏßÄ
        importedVersion.id = `imported-${Date.now()}`;
        importedVersion.timestamp = new Date();

        setVersions(prev => [importedVersion, ...prev]);
        return importedVersion.id;
    }, []);

    const contextValue: VersionControlContextValue = {
        versions,
        branches,
        currentVersion,
        currentBranch,
        isLoading,
        saveVersion,
        restoreVersion,
        deleteVersion,
        compareVersions,
        createBranch,
        switchBranch,
        deleteBranch,
        createMergeRequest,
        mergeBranch,
        createTag,
        exportVersion,
        importVersion
    };

    return (
        <VersionControlContext.Provider value={contextValue}>
            {children}
        </VersionControlContext.Provider>
    );
};

// Î≤ÑÏ†Ñ ÌûàÏä§ÌÜ†Î¶¨ Ïª¥Ìè¨ÎÑåÌä∏
export const VersionHistory: React.FC = () => {
    const {
        versions,
        currentVersion,
        restoreVersion,
        deleteVersion,
        compareVersions,
        createTag,
        exportVersion
    } = useVersionControl();

    const [selectedVersions, setSelectedVersions] = useState<string[]>([]);
    const [showCompare, setShowCompare] = useState(false);
    const [showTagDialog, setShowTagDialog] = useState(false);
    const [tagName, setTagName] = useState('');
    const [tagDescription, setTagDescription] = useState('');
    const [tagVersionId, setTagVersionId] = useState('');

    const handleVersionSelect = (versionId: string) => {
        setSelectedVersions(prev => {
            if (prev.includes(versionId)) {
                return prev.filter(id => id !== versionId);
            } else if (prev.length < 2) {
                return [...prev, versionId];
            } else {
                return [prev[1], versionId];
            }
        });
    };

    const handleCompare = () => {
        if (selectedVersions.length === 2) {
            setShowCompare(true);
        }
    };

    const handleCreateTag = async () => {
        if (tagName && tagVersionId) {
            createTag(tagVersionId, tagName, tagDescription);
            setShowTagDialog(false);
            setTagName('');
            setTagDescription('');
            setTagVersionId('');
        }
    };

    const handleExport = async (versionId: string) => {
        try {
            const blob = await exportVersion(versionId);
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `version-${versionId}.json`;
            a.click();
            URL.revokeObjectURL(url);
        } catch (error) {
            console.error('Export failed:', error);
        }
    };

    return (
        <VersionControlPanel>
            <Box p={2} borderBottom={1} borderColor="divider">
                <Box display="flex" justifyContent="space-between" alignItems="center">
                    <Typography variant="h6">Î≤ÑÏ†Ñ ÌûàÏä§ÌÜ†Î¶¨</Typography>
                    <Box>
                        {selectedVersions.length === 2 && (
                            <Button
                                size="small"
                                startIcon={<CompareIcon />}
                                onClick={handleCompare}
                                sx={{ mr: 1 }}
                            >
                                ÎπÑÍµê
                            </Button>
                        )}
                        <Button
                            size="small"
                            startIcon={<SaveIcon />}
                            variant="contained"
                        >
                            Ï†ÄÏû•
                        </Button>
                    </Box>
                </Box>
            </Box>

            <Box flex={1} overflow="auto" p={2}>
                {/* Alternative Timeline using List and Cards */}
                <List>
                    {versions.map((version, index) => (
                        <ListItem key={version.id} sx={{ flexDirection: 'column', alignItems: 'stretch', mb: 2 }}>
                            <Box display="flex" alignItems="center" mb={1}>
                                <Avatar
                                    sx={{
                                        bgcolor: version.id === currentVersion?.id ? 'primary.main' :
                                            version.isAutoSave ? 'grey.500' : 'secondary.main',
                                        mr: 2
                                    }}
                                >
                                    {version.isAutoSave ? <SyncIcon /> : <SaveIcon />}
                                </Avatar>
                                <Box flex={1}>
                                    <VersionItem
                                        isActive={version.id === currentVersion?.id}
                                        onClick={() => handleVersionSelect(version.id)}
                                        sx={{
                                            border: selectedVersions.includes(version.id) ?
                                                '2px solid orange' : undefined
                                        }}
                                    >
                                        <CardContent>
                                            <Box display="flex" justifyContent="space-between" alignItems="flex-start">
                                                <Box flex={1}>
                                                    <Typography variant="h6" gutterBottom>
                                                        {version.title}
                                                        {version.id === currentVersion?.id && (
                                                            <Chip
                                                                label="ÌòÑÏû¨"
                                                                size="small"
                                                                color="primary"
                                                                sx={{ ml: 1 }}
                                                            />
                                                        )}
                                                    </Typography>

                                                    <Typography variant="body2" color="text.secondary" gutterBottom>
                                                        {version.description}
                                                    </Typography>

                                                    <Box display="flex" alignItems="center" gap={1} mb={1}>
                                                        <Avatar sx={{ width: 24, height: 24 }}>
                                                            {version.author.name[0]}
                                                        </Avatar>
                                                        <Typography variant="caption">
                                                            {version.author.name}
                                                        </Typography>
                                                        <Typography variant="caption" color="text.disabled">
                                                            {version.timestamp.toLocaleString()}
                                                        </Typography>
                                                    </Box>

                                                    <Box display="flex" alignItems="center" gap={2}>
                                                        <Typography variant="caption">
                                                            {version.metadata.wordCount}Îã®Ïñ¥
                                                        </Typography>
                                                        <Typography variant="caption">
                                                            {version.metadata.blockCount}Î∏îÎ°ù
                                                        </Typography>
                                                        <BranchChip
                                                            label={version.metadata.branch}
                                                            size="small"
                                                        />
                                                    </Box>

                                                    {version.metadata.tags.length > 0 && (
                                                        <Box mt={1}>
                                                            {version.metadata.tags.map(tag => (
                                                                <Chip
                                                                    key={tag}
                                                                    label={tag}
                                                                    size="small"
                                                                    variant="outlined"
                                                                    sx={{ mr: 0.5, mb: 0.5 }}
                                                                />
                                                            ))}
                                                        </Box>
                                                    )}

                                                    {version.metadata.changes.length > 0 && (
                                                        <Box mt={1}>
                                                            <Typography variant="caption" color="text.secondary">
                                                                Î≥ÄÍ≤ΩÏÇ¨Ìï≠:
                                                            </Typography>
                                                            {version.metadata.changes.slice(0, 3).map((change, i) => (
                                                                <Box key={i} display="flex" alignItems="center" mt={0.5}>
                                                                    <ChangeIndicator changeType={change.type} />
                                                                    <Typography variant="caption">
                                                                        {change.description}
                                                                    </Typography>
                                                                </Box>
                                                            ))}
                                                            {version.metadata.changes.length > 3 && (
                                                                <Typography variant="caption" color="text.disabled">
                                                                    +{version.metadata.changes.length - 3}Í∞ú Îçî
                                                                </Typography>
                                                            )}
                                                        </Box>
                                                    )}
                                                </Box>

                                                <Box display="flex" flexDirection="column" gap={1}>
                                                    <Tooltip title="Î≥µÏõê">
                                                        <IconButton
                                                            size="small"
                                                            onClick={(e) => {
                                                                e.stopPropagation();
                                                                restoreVersion(version.id);
                                                            }}
                                                            disabled={version.id === currentVersion?.id}
                                                        >
                                                            <RestoreIcon />
                                                        </IconButton>
                                                    </Tooltip>

                                                    <Tooltip title="ÌÉúÍ∑∏ Ï∂îÍ∞Ä">
                                                        <IconButton
                                                            size="small"
                                                            onClick={(e) => {
                                                                e.stopPropagation();
                                                                setTagVersionId(version.id);
                                                                setShowTagDialog(true);
                                                            }}
                                                        >
                                                            <TagIcon />
                                                        </IconButton>
                                                    </Tooltip>

                                                    <Tooltip title="ÎÇ¥Î≥¥ÎÇ¥Í∏∞">
                                                        <IconButton
                                                            size="small"
                                                            onClick={(e) => {
                                                                e.stopPropagation();
                                                                handleExport(version.id);
                                                            }}
                                                        >
                                                            <DownloadIcon />
                                                        </IconButton>
                                                    </Tooltip>

                                                    {!version.isAutoSave && version.id !== currentVersion?.id && (
                                                        <Tooltip title="ÏÇ≠Ï†ú">
                                                            <IconButton
                                                                size="small"
                                                                color="error"
                                                                onClick={(e) => {
                                                                    e.stopPropagation();
                                                                    deleteVersion(version.id);
                                                                }}
                                                            >
                                                                <DeleteIcon />
                                                            </IconButton>
                                                        </Tooltip>
                                                    )}
                                                </Box>
                                            </Box>
                                        </CardContent>
                                    </VersionItem>
                                </Box>
                            </Box>
                        </ListItem>
                    ))}
                </List>
            </Box>

            {/* ÌÉúÍ∑∏ ÏÉùÏÑ± Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
            <Dialog open={showTagDialog} onClose={() => setShowTagDialog(false)}>
                <DialogTitle>ÌÉúÍ∑∏ ÏÉùÏÑ±</DialogTitle>
                <DialogContent>
                    <TextField
                        fullWidth
                        label="ÌÉúÍ∑∏ Ïù¥Î¶Ñ"
                        value={tagName}
                        onChange={(e) => setTagName(e.target.value)}
                        margin="normal"
                    />
                    <TextField
                        fullWidth
                        label="ÏÑ§Î™Ö"
                        value={tagDescription}
                        onChange={(e) => setTagDescription(e.target.value)}
                        margin="normal"
                        multiline
                        rows={3}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setShowTagDialog(false)}>Ï∑®ÏÜå</Button>
                    <Button onClick={handleCreateTag} variant="contained">ÏÉùÏÑ±</Button>
                </DialogActions>
            </Dialog>

            {/* Î≤ÑÏ†Ñ ÎπÑÍµê Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
            <Dialog
                open={showCompare}
                onClose={() => setShowCompare(false)}
                maxWidth="lg"
                fullWidth
            >
                <DialogTitle>Î≤ÑÏ†Ñ ÎπÑÍµê</DialogTitle>
                <DialogContent>
                    {selectedVersions.length === 2 && (
                        <Box>
                            <Typography variant="h6" gutterBottom>
                                Î≥ÄÍ≤ΩÏÇ¨Ìï≠
                            </Typography>
                            {compareVersions(selectedVersions[0], selectedVersions[1]).map((change, index) => (
                                <Box key={index} display="flex" alignItems="center" mb={1}>
                                    <ChangeIndicator changeType={change.type} />
                                    <Typography>{change.description}</Typography>
                                </Box>
                            ))}
                        </Box>
                    )}
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setShowCompare(false)}>Îã´Í∏∞</Button>
                </DialogActions>
            </Dialog>
        </VersionControlPanel>
    );
};

// Î∏åÎûúÏπò Í¥ÄÎ¶¨ Ïª¥Ìè¨ÎÑåÌä∏
export const BranchManager: React.FC = () => {
    const {
        branches,
        currentBranch,
        createBranch,
        switchBranch,
        deleteBranch,
        createMergeRequest
    } = useVersionControl();

    const [showCreateBranch, setShowCreateBranch] = useState(false);
    const [branchName, setBranchName] = useState('');
    const [branchDescription, setBranchDescription] = useState('');

    const handleCreateBranch = async () => {
        if (branchName) {
            await createBranch(branchName, branchDescription);
            setShowCreateBranch(false);
            setBranchName('');
            setBranchDescription('');
        }
    };

    return (
        <Box>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6">Î∏åÎûúÏπò</Typography>
                <Button
                    size="small"
                    startIcon={<AddIcon />}
                    onClick={() => setShowCreateBranch(true)}
                >
                    Î∏åÎûúÏπò ÏÉùÏÑ±
                </Button>
            </Box>

            <List>
                {branches.map(branch => (
                    <ListItem key={branch.id}>
                        <ListItemAvatar>
                            <Avatar>
                                <BranchIcon />
                            </Avatar>
                        </ListItemAvatar>

                        <ListItemText
                            primary={
                                <Box display="flex" alignItems="center" gap={1}>
                                    {branch.name}
                                    {branch.isActive && (
                                        <Chip label="ÌòÑÏû¨" size="small" color="primary" />
                                    )}
                                    {branch.isProtected && (
                                        <Chip label="Î≥¥Ìò∏Îê®" size="small" variant="outlined" />
                                    )}
                                </Box>
                            }
                            secondary={
                                <Box>
                                    <Typography variant="body2">
                                        {branch.description}
                                    </Typography>
                                    <Typography variant="caption" color="text.disabled">
                                        ÎßàÏßÄÎßâ Ïª§Î∞ã: {branch.lastCommit}
                                    </Typography>
                                </Box>
                            }
                        />

                        <ListItemSecondaryAction>
                            <Box display="flex" gap={1}>
                                {!branch.isActive && (
                                    <Button
                                        size="small"
                                        onClick={() => switchBranch(branch.name)}
                                    >
                                        Ï†ÑÌôò
                                    </Button>
                                )}

                                {!branch.isProtected && (
                                    <IconButton
                                        size="small"
                                        color="error"
                                        onClick={() => deleteBranch(branch.id)}
                                    >
                                        <DeleteIcon />
                                    </IconButton>
                                )}
                            </Box>
                        </ListItemSecondaryAction>
                    </ListItem>
                ))}
            </List>

            {/* Î∏åÎûúÏπò ÏÉùÏÑ± Îã§Ïù¥ÏñºÎ°úÍ∑∏ */}
            <Dialog open={showCreateBranch} onClose={() => setShowCreateBranch(false)}>
                <DialogTitle>ÏÉà Î∏åÎûúÏπò ÏÉùÏÑ±</DialogTitle>
                <DialogContent>
                    <TextField
                        fullWidth
                        label="Î∏åÎûúÏπò Ïù¥Î¶Ñ"
                        value={branchName}
                        onChange={(e) => setBranchName(e.target.value)}
                        margin="normal"
                    />
                    <TextField
                        fullWidth
                        label="ÏÑ§Î™Ö"
                        value={branchDescription}
                        onChange={(e) => setBranchDescription(e.target.value)}
                        margin="normal"
                        multiline
                        rows={3}
                    />
                </DialogContent>
                <DialogActions>
                    <Button onClick={() => setShowCreateBranch(false)}>Ï∑®ÏÜå</Button>
                    <Button onClick={handleCreateBranch} variant="contained">ÏÉùÏÑ±</Button>
                </DialogActions>
            </Dialog>
        </Box>
    );
};

export default VersionControlProvider;
