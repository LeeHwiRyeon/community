import React, { useState } from 'react'
import { Box, Button, VStack, HStack, Text, Input, Select, Badge, Grid, Card, CardBody, Heading, useToast, Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalCloseButton, useDisclosure, FormControl, FormLabel } from '@chakra-ui/react'
import Countdown from 'react-countdown'

// Mock promotion data
const mockPromotions = [
    {
        id: 1,
        type: 'flash_sale',
        title: 'Î≤àÍ∞ú ÏÑ∏Ïùº',
        description: '1ÏãúÍ∞Ñ ÎèôÏïà Î™®Îì† ÏÉÅÌíà 50% Ìï†Ïù∏',
        discount: 50,
        endTime: Date.now() + 3600000, // 1 hour from now
        isActive: true
    },
    {
        id: 2,
        type: 'coupon',
        title: 'Î¥ÑÎßûÏù¥ Ïø†Ìè∞',
        description: '‚Ç©10,000 Ïù¥ÏÉÅ Íµ¨Îß§ Ïãú ‚Ç©5,000 Ìï†Ïù∏',
        discount: 5000,
        endTime: Date.now() + 86400000 * 7, // 7 days from now
        isActive: true
    }
]

interface Coupon {
    id: string
    code: string
    discount: number
    type: 'percentage' | 'fixed'
    minPurchase: number
    expiryDate: string
    isActive: boolean
}

const PromotionTools: React.FC = () => {
    const [promotions, setPromotions] = useState(mockPromotions)
    const [coupons, setCoupons] = useState<Coupon[]>([])
    const [newCoupon, setNewCoupon] = useState({
        code: '',
        discount: 0,
        type: 'percentage' as 'percentage' | 'fixed',
        minPurchase: 0,
        expiryDate: ''
    })
    const { isOpen, onOpen, onClose } = useDisclosure()
    const toast = useToast()

    const handleCreateCoupon = () => {
        const coupon: Coupon = {
            id: Date.now().toString(),
            code: newCoupon.code,
            discount: newCoupon.discount,
            type: newCoupon.type,
            minPurchase: newCoupon.minPurchase,
            expiryDate: newCoupon.expiryDate,
            isActive: true
        }
        setCoupons([...coupons, coupon])
        setNewCoupon({
            code: '',
            discount: 0,
            type: 'percentage',
            minPurchase: 0,
            expiryDate: ''
        })
        onClose()
        toast({
            title: 'Ïø†Ìè∞ ÏÉùÏÑ± ÏÑ±Í≥µ',
            description: 'ÏÉà Ïø†Ìè∞Ïù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§.',
            status: 'success',
            duration: 3000,
            isClosable: true,
        })
    }

    const handleCreateFlashSale = () => {
        const flashSale = {
            id: Date.now(),
            type: 'flash_sale',
            title: 'Í∏¥Í∏â ÏÑ∏Ïùº',
            description: '30Î∂Ñ ÎèôÏïà Î™®Îì† ÏÉÅÌíà 30% Ìï†Ïù∏',
            discount: 30,
            endTime: Date.now() + 1800000, // 30 minutes
            isActive: true
        }
        setPromotions([...promotions, flashSale])
        toast({
            title: 'Î≤àÍ∞ú ÏÑ∏Ïùº ÏÉùÏÑ±',
            description: 'Î≤àÍ∞ú ÏÑ∏ÏùºÏù¥ ÏãúÏûëÎêòÏóàÏäµÎãàÎã§.',
            status: 'success',
            duration: 3000,
            isClosable: true,
        })
    }

    const CountdownRenderer = ({ hours, minutes, seconds, completed }: any) => {
        if (completed) {
            return <Text color="red.500" fontWeight="bold">Ï¢ÖÎ£åÎê®</Text>
        }
        return (
            <HStack spacing={1}>
                <Badge colorScheme="red" fontSize="md" p={1}>
                    {hours.toString().padStart(2, '0')}
                </Badge>
                <Text>:</Text>
                <Badge colorScheme="red" fontSize="md" p={1}>
                    {minutes.toString().padStart(2, '0')}
                </Badge>
                <Text>:</Text>
                <Badge colorScheme="red" fontSize="md" p={1}>
                    {seconds.toString().padStart(2, '0')}
                </Badge>
            </HStack>
        )
    }

    return (
        <Box>
            <VStack spacing={6} align="stretch">
                <HStack justify="space-between" align="center">
                    <Heading size="lg">ÌîÑÎ°úÎ™®ÏÖò Î∞è ÎßàÏºÄÌåÖ ÎèÑÍµ¨</Heading>
                    <HStack>
                        <Button colorScheme="purple" onClick={onOpen}>
                            Ïø†Ìè∞ ÏÉùÏÑ±
                        </Button>
                        <Button colorScheme="orange" onClick={handleCreateFlashSale}>
                            Î≤àÍ∞ú ÏÑ∏Ïùº ÏãúÏûë
                        </Button>
                    </HStack>
                </HStack>

                {/* Active Promotions */}
                <Box>
                    <Heading size="md" mb={4}>ÌôúÏÑ± ÌîÑÎ°úÎ™®ÏÖò</Heading>
                    <Grid templateColumns="repeat(auto-fill, minmax(300px, 1fr))" gap={4}>
                        {promotions.filter(p => p.isActive).map((promo) => (
                            <Card key={promo.id}>
                                <CardBody>
                                    <VStack align="stretch" spacing={3}>
                                        <HStack justify="space-between">
                                            <Badge colorScheme={promo.type === 'flash_sale' ? 'red' : 'green'}>
                                                {promo.type === 'flash_sale' ? 'Î≤àÍ∞ú ÏÑ∏Ïùº' : 'Ïø†Ìè∞'}
                                            </Badge>
                                            <Text fontSize="sm" color="gray.500">
                                                {promo.discount}{promo.type === 'flash_sale' ? '%' : 'Ïõê'} Ìï†Ïù∏
                                            </Text>
                                        </HStack>

                                        <Heading size="sm">{promo.title}</Heading>
                                        <Text fontSize="sm">{promo.description}</Text>

                                        {promo.type === 'flash_sale' && (
                                            <Box>
                                                <Text fontSize="sm" mb={1}>ÎÇ®ÏùÄ ÏãúÍ∞Ñ:</Text>
                                                <Countdown
                                                    date={promo.endTime}
                                                    renderer={CountdownRenderer}
                                                />
                                            </Box>
                                        )}

                                        <HStack spacing={2}>
                                            <Button size="sm" colorScheme="blue" flex={1}>
                                                Í≥µÏú†ÌïòÍ∏∞
                                            </Button>
                                            <Button size="sm" variant="outline" flex={1}>
                                                ÏàòÏ†ï
                                            </Button>
                                        </HStack>
                                    </VStack>
                                </CardBody>
                            </Card>
                        ))}
                    </Grid>
                </Box>

                {/* Coupons List */}
                <Box>
                    <Heading size="md" mb={4}>Ïø†Ìè∞ Î™©Î°ù</Heading>
                    <Grid templateColumns="repeat(auto-fill, minmax(300px, 1fr))" gap={4}>
                        {coupons.map((coupon) => (
                            <Card key={coupon.id}>
                                <CardBody>
                                    <VStack align="stretch" spacing={2}>
                                        <HStack justify="space-between">
                                            <Badge colorScheme="green">Ïø†Ìè∞</Badge>
                                            <Text fontWeight="bold" fontSize="lg">
                                                {coupon.code}
                                            </Text>
                                        </HStack>

                                        <Text>
                                            {coupon.type === 'percentage'
                                                ? `${coupon.discount}% Ìï†Ïù∏`
                                                : `${coupon.discount.toLocaleString()}Ïõê Ìï†Ïù∏`
                                            }
                                        </Text>

                                        <Text fontSize="sm" color="gray.600">
                                            ÏµúÏÜå Íµ¨Îß§Í∏àÏï°: ‚Ç©{coupon.minPurchase.toLocaleString()}
                                        </Text>

                                        <Text fontSize="sm" color="gray.600">
                                            ÎßåÎ£åÏùº: {new Date(coupon.expiryDate).toLocaleDateString()}
                                        </Text>

                                        <HStack spacing={2}>
                                            <Button size="sm" colorScheme="blue" flex={1}>
                                                Î≥µÏÇ¨
                                            </Button>
                                            <Button size="sm" variant="outline" flex={1}>
                                                ÎπÑÌôúÏÑ±Ìôî
                                            </Button>
                                        </HStack>
                                    </VStack>
                                </CardBody>
                            </Card>
                        ))}
                    </Grid>
                </Box>

                {/* Social Sharing */}
                <Box>
                    <Heading size="md" mb={4}>ÏÜåÏÖú Í≥µÏú†</Heading>
                    <HStack spacing={4}>
                        <Button colorScheme="facebook" leftIcon={<Text>üìò</Text>}>
                            Facebook Í≥µÏú†
                        </Button>
                        <Button colorScheme="twitter" leftIcon={<Text>üê¶</Text>}>
                            Twitter Í≥µÏú†
                        </Button>
                        <Button colorScheme="pink" leftIcon={<Text>üì∑</Text>}>
                            Instagram Í≥µÏú†
                        </Button>
                    </HStack>
                </Box>

                {/* Newsletter */}
                <Box>
                    <Heading size="md" mb={4}>Ïù¥Î©îÏùº Îâ¥Ïä§Î†àÌÑ∞</Heading>
                    <VStack align="stretch" spacing={4}>
                        <Text>Íµ¨ÎèÖÏûê Ïàò: 1,234Î™Ö</Text>
                        <HStack>
                            <Input placeholder="Îâ¥Ïä§Î†àÌÑ∞ Ï†úÎ™©" />
                            <Button colorScheme="blue">Î≥¥ÎÇ¥Í∏∞</Button>
                        </HStack>
                    </VStack>
                </Box>
            </VStack>

            {/* Create Coupon Modal */}
            <Modal isOpen={isOpen} onClose={onClose}>
                <ModalOverlay bg="transparent" />
                <ModalContent>
                    <ModalHeader>Ïø†Ìè∞ ÏÉùÏÑ±</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody pb={6}>
                        <VStack spacing={4}>
                            <FormControl>
                                <FormLabel>Ïø†Ìè∞ ÏΩîÎìú</FormLabel>
                                <Input
                                    value={newCoupon.code}
                                    onChange={(e) => setNewCoupon({ ...newCoupon, code: e.target.value })}
                                    placeholder="SPRING2024"
                                />
                            </FormControl>

                            <FormControl>
                                <FormLabel>Ìï†Ïù∏ Ïú†Ìòï</FormLabel>
                                <Select
                                    value={newCoupon.type}
                                    onChange={(e) => setNewCoupon({ ...newCoupon, type: e.target.value as 'percentage' | 'fixed' })}
                                >
                                    <option value="percentage">ÌçºÏÑºÌä∏ Ìï†Ïù∏</option>
                                    <option value="fixed">Í≥†Ï†ï Í∏àÏï° Ìï†Ïù∏</option>
                                </Select>
                            </FormControl>

                            <FormControl>
                                <FormLabel>Ìï†Ïù∏ Í∞í</FormLabel>
                                <Input
                                    type="number"
                                    value={newCoupon.discount}
                                    onChange={(e) => setNewCoupon({ ...newCoupon, discount: Number(e.target.value) })}
                                    placeholder={newCoupon.type === 'percentage' ? '30' : '5000'}
                                />
                            </FormControl>

                            <FormControl>
                                <FormLabel>ÏµúÏÜå Íµ¨Îß§Í∏àÏï°</FormLabel>
                                <Input
                                    type="number"
                                    value={newCoupon.minPurchase}
                                    onChange={(e) => setNewCoupon({ ...newCoupon, minPurchase: Number(e.target.value) })}
                                    placeholder="10000"
                                />
                            </FormControl>

                            <FormControl>
                                <FormLabel>ÎßåÎ£åÏùº</FormLabel>
                                <Input
                                    type="date"
                                    value={newCoupon.expiryDate}
                                    onChange={(e) => setNewCoupon({ ...newCoupon, expiryDate: e.target.value })}
                                />
                            </FormControl>

                            <Button colorScheme="blue" onClick={handleCreateCoupon} w="100%">
                                Ïø†Ìè∞ ÏÉùÏÑ±
                            </Button>
                        </VStack>
                    </ModalBody>
                </ModalContent>
            </Modal>
        </Box>
    )
}

export default PromotionTools