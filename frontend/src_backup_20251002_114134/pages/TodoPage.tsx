import React, { useState, useEffect } from 'react';
import {
    Box,
    VStack,
    HStack,
    Text,
    Button,
    Input,
    Select,
    Badge,
    Card,
    CardHeader,
    CardBody,
    CardFooter,
    Flex,
    Spacer,
    IconButton,
    useDisclosure,
    Modal,
    ModalOverlay,
    ModalContent,
    ModalHeader,
    ModalBody,
    ModalFooter,
    ModalCloseButton,
    FormControl,
    FormLabel,
    Textarea,
    NumberInput,
    NumberInputField,
    NumberInputStepper,
    NumberIncrementStepper,
    NumberDecrementStepper,
    useColorModeValue,
    Spinner,
    Alert,
    AlertIcon,
    Tabs,
    TabList,
    TabPanels,
    Tab,
    TabPanel,
    Table,
    Thead,
    Tbody,
    Tr,
    Th,
    Td,
    TableContainer,
    InputGroup,
    InputLeftElement,
    Menu,
    MenuButton,
    MenuList,
    MenuItem,
    Divider,
    Progress,
    Tooltip,
    Wrap,
    WrapItem
} from '@chakra-ui/react';
import {
    SearchIcon,
    AddIcon,
    EditIcon,
    DeleteIcon,
    ViewIcon,
    CheckIcon,
    TimeIcon,
    StarIcon,
    ChatIcon,
    AttachmentIcon,
    CalendarIcon,
    UserIcon
} from '@chakra-ui/icons';

interface Todo {
    id: string;
    title: string;
    description: string;
    status: 'pending' | 'in_progress' | 'completed' | 'cancelled' | 'on_hold';
    priority: number;
    category: string;
    assignee: {
        id: string;
        name: string;
        email: string;
        avatar?: string;
    };
    creator: {
        id: string;
        name: string;
        email: string;
        avatar?: string;
    };
    dueDate?: string;
    estimatedHours?: number;
    actualHours?: number;
    tags: string[];
    subtasks: Array<{
        title: string;
        completed: boolean;
        completedAt?: string;
    }>;
    comments: Array<{
        user: {
            id: string;
            name: string;
            avatar?: string;
        };
        content: string;
        createdAt: string;
    }>;
    createdAt: string;
    updatedAt: string;
    progress: number;
    isOverdue: boolean;
}

const TodoPage: React.FC = () => {
    const [todos, setTodos] = useState<Todo[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [statusFilter, setStatusFilter] = useState<string>('all');
    const [priorityFilter, setPriorityFilter] = useState<string>('all');
    const [categoryFilter, setCategoryFilter] = useState<string>('all');
    const [sortBy, setSortBy] = useState<string>('lastActivityAt');
    const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');

    const { isOpen: isCreateOpen, onOpen: onCreateOpen, onClose: onCreateClose } = useDisclosure();
    const { isOpen: isEditOpen, onOpen: onEditOpen, onClose: onEditClose } = useDisclosure();
    const { isOpen: isViewOpen, onOpen: onViewOpen, onClose: onViewClose } = useDisclosure();

    const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);
    const [editingTodo, setEditingTodo] = useState<Partial<Todo>>({});

    const bgColor = useColorModeValue('white', 'gray.800');
    const borderColor = useColorModeValue('gray.200', 'gray.600');

    // TODO Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    useEffect(() => {
        loadTodos();
    }, []);

    const loadTodos = async () => {
        try {
            setLoading(true);
            const response = await fetch('/api/todos', {
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (!response.ok) {
                throw new Error('TODO Î™©Î°ùÏùÑ Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.');
            }

            const data = await response.json();
            setTodos(data.data || []);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        } finally {
            setLoading(false);
        }
    };

    // ÌïÑÌÑ∞ÎßÅÎêú TODO Î™©Î°ù
    const filteredTodos = todos.filter(todo => {
        const matchesSearch = todo.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            todo.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
            todo.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));

        const matchesStatus = statusFilter === 'all' || todo.status === statusFilter;
        const matchesPriority = priorityFilter === 'all' || todo.priority.toString() === priorityFilter;
        const matchesCategory = categoryFilter === 'all' || todo.category === categoryFilter;

        return matchesSearch && matchesStatus && matchesPriority && matchesCategory;
    });

    // Ï†ïÎ†¨Îêú TODO Î™©Î°ù
    const sortedTodos = [...filteredTodos].sort((a, b) => {
        let aValue: any = a[sortBy as keyof Todo];
        let bValue: any = b[sortBy as keyof Todo];

        if (sortBy === 'dueDate') {
            aValue = a.dueDate ? new Date(a.dueDate).getTime() : 0;
            bValue = b.dueDate ? new Date(b.dueDate).getTime() : 0;
        }

        if (sortOrder === 'asc') {
            return aValue > bValue ? 1 : -1;
        } else {
            return aValue < bValue ? 1 : -1;
        }
    });

    // TODO ÏÉùÏÑ±
    const handleCreateTodo = async () => {
        try {
            const response = await fetch('/api/todos', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(editingTodo)
            });

            if (!response.ok) {
                throw new Error('TODO ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            await loadTodos();
            onCreateClose();
            setEditingTodo({});
        } catch (err) {
            setError(err instanceof Error ? err.message : 'TODO ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // TODO ÏàòÏ†ï
    const handleUpdateTodo = async () => {
        if (!selectedTodo) return;

        try {
            const response = await fetch(`/api/todos/${selectedTodo.id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify(editingTodo)
            });

            if (!response.ok) {
                throw new Error('TODO ÏàòÏ†ïÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            await loadTodos();
            onEditClose();
            setSelectedTodo(null);
            setEditingTodo({});
        } catch (err) {
            setError(err instanceof Error ? err.message : 'TODO ÏàòÏ†ï Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // TODO ÏÇ≠Ï†ú
    const handleDeleteTodo = async (id: string) => {
        if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ TODOÎ•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;

        try {
            const response = await fetch(`/api/todos/${id}`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                }
            });

            if (!response.ok) {
                throw new Error('TODO ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            await loadTodos();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'TODO ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // ÏÉÅÌÉú Î≥ÄÍ≤Ω
    const handleStatusChange = async (id: string, status: string) => {
        try {
            const response = await fetch(`/api/todos/${id}/status`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('token')}`
                },
                body: JSON.stringify({ status })
            });

            if (!response.ok) {
                throw new Error('ÏÉÅÌÉú Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
            }

            await loadTodos();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'ÏÉÅÌÉú Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };

    // Ïö∞ÏÑ†ÏàúÏúÑ ÏÉâÏÉÅ
    const getPriorityColor = (priority: number) => {
        switch (priority) {
            case 1: return 'red';
            case 2: return 'orange';
            case 3: return 'yellow';
            case 4: return 'green';
            case 5: return 'blue';
            default: return 'gray';
        }
    };

    // ÏÉÅÌÉú ÏÉâÏÉÅ
    const getStatusColor = (status: string) => {
        switch (status) {
            case 'pending': return 'gray';
            case 'in_progress': return 'blue';
            case 'completed': return 'green';
            case 'cancelled': return 'red';
            case 'on_hold': return 'yellow';
            default: return 'gray';
        }
    };

    // ÏÉÅÌÉú ÎùºÎ≤®
    const getStatusLabel = (status: string) => {
        switch (status) {
            case 'pending': return 'ÎåÄÍ∏∞';
            case 'in_progress': return 'ÏßÑÌñâÏ§ë';
            case 'completed': return 'ÏôÑÎ£å';
            case 'cancelled': return 'Ï∑®ÏÜå';
            case 'on_hold': return 'Î≥¥Î•ò';
            default: return status;
        }
    };

    if (loading) {
        return (
            <Box p={8} textAlign="center">
                <Spinner size="xl" />
                <Text mt={4}>TODO Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ë...</Text>
            </Box>
        );
    }

    return (
        <Box p={6} maxW="1200px" mx="auto">
            <VStack spacing={6} align="stretch">
                {/* Ìó§Îçî */}
                <Flex align="center" justify="space-between">
                    <Text fontSize="2xl" fontWeight="bold">üìã TODO Í¥ÄÎ¶¨</Text>
                    <Button
                        leftIcon={<AddIcon />}
                        colorScheme="blue"
                        onClick={onCreateOpen}
                    >
                        ÏÉà TODO
                    </Button>
                </Flex>

                {/* ÏóêÎü¨ Î©îÏãúÏßÄ */}
                {error && (
                    <Alert status="error">
                        <AlertIcon />
                        {error}
                    </Alert>
                )}

                {/* ÌïÑÌÑ∞ Î∞è Í≤ÄÏÉâ */}
                <Card>
                    <CardBody>
                        <VStack spacing={4}>
                            {/* Í≤ÄÏÉâ */}
                            <InputGroup>
                                <InputLeftElement>
                                    <SearchIcon color="gray.300" />
                                </InputLeftElement>
                                <Input
                                    placeholder="TODO Í≤ÄÏÉâ..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                />
                            </InputGroup>

                            {/* ÌïÑÌÑ∞ */}
                            <HStack spacing={4} wrap="wrap">
                                <Select
                                    value={statusFilter}
                                    onChange={(e) => setStatusFilter(e.target.value)}
                                    w="150px"
                                >
                                    <option value="all">Î™®Îì† ÏÉÅÌÉú</option>
                                    <option value="pending">ÎåÄÍ∏∞</option>
                                    <option value="in_progress">ÏßÑÌñâÏ§ë</option>
                                    <option value="completed">ÏôÑÎ£å</option>
                                    <option value="cancelled">Ï∑®ÏÜå</option>
                                    <option value="on_hold">Î≥¥Î•ò</option>
                                </Select>

                                <Select
                                    value={priorityFilter}
                                    onChange={(e) => setPriorityFilter(e.target.value)}
                                    w="150px"
                                >
                                    <option value="all">Î™®Îì† Ïö∞ÏÑ†ÏàúÏúÑ</option>
                                    <option value="1">Í∏¥Í∏â</option>
                                    <option value="2">ÎÜíÏùå</option>
                                    <option value="3">Î≥¥ÌÜµ</option>
                                    <option value="4">ÎÇÆÏùå</option>
                                    <option value="5">ÏµúÏ†Ä</option>
                                </Select>

                                <Select
                                    value={categoryFilter}
                                    onChange={(e) => setCategoryFilter(e.target.value)}
                                    w="150px"
                                >
                                    <option value="all">Î™®Îì† Ïπ¥ÌÖåÍ≥†Î¶¨</option>
                                    <option value="feature">Í∏∞Îä•</option>
                                    <option value="bug">Î≤ÑÍ∑∏</option>
                                    <option value="improvement">Í∞úÏÑ†</option>
                                    <option value="documentation">Î¨∏ÏÑú</option>
                                    <option value="testing">ÌÖåÏä§Ìä∏</option>
                                    <option value="refactoring">Î¶¨Ìå©ÌÜ†ÎßÅ</option>
                                    <option value="deployment">Î∞∞Ìè¨</option>
                                </Select>

                                <Select
                                    value={sortBy}
                                    onChange={(e) => setSortBy(e.target.value)}
                                    w="150px"
                                >
                                    <option value="lastActivityAt">ÏµúÍ∑º ÌôúÎèô</option>
                                    <option value="createdAt">ÏÉùÏÑ±Ïùº</option>
                                    <option value="dueDate">ÎßàÍ∞êÏùº</option>
                                    <option value="priority">Ïö∞ÏÑ†ÏàúÏúÑ</option>
                                    <option value="status">ÏÉÅÌÉú</option>
                                </Select>

                                <Select
                                    value={sortOrder}
                                    onChange={(e) => setSortOrder(e.target.value as 'asc' | 'desc')}
                                    w="100px"
                                >
                                    <option value="desc">ÎÇ¥Î¶ºÏ∞®Ïàú</option>
                                    <option value="asc">Ïò§Î¶ÑÏ∞®Ïàú</option>
                                </Select>
                            </HStack>
                        </VStack>
                    </CardBody>
                </Card>

                {/* TODO Î™©Î°ù */}
                <VStack spacing={4} align="stretch">
                    {sortedTodos.length === 0 ? (
                        <Card>
                            <CardBody textAlign="center" py={12}>
                                <Text fontSize="lg" color="gray.500">
                                    {searchTerm || statusFilter !== 'all' || priorityFilter !== 'all' || categoryFilter !== 'all'
                                        ? 'Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî TODOÍ∞Ä ÏóÜÏäµÎãàÎã§.'
                                        : 'ÏïÑÏßÅ TODOÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏÉà TODOÎ•º ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!'}
                                </Text>
                            </CardBody>
                        </Card>
                    ) : (
                        sortedTodos.map((todo) => (
                            <Card key={todo.id} bg={bgColor} borderColor={borderColor}>
                                <CardBody>
                                    <VStack spacing={3} align="stretch">
                                        {/* Ìó§Îçî */}
                                        <Flex align="center" justify="space-between">
                                            <HStack spacing={3}>
                                                <Badge
                                                    colorScheme={getStatusColor(todo.status)}
                                                    variant="solid"
                                                >
                                                    {getStatusLabel(todo.status)}
                                                </Badge>
                                                <Badge
                                                    colorScheme={getPriorityColor(todo.priority)}
                                                    variant="outline"
                                                >
                                                    Ïö∞ÏÑ†ÏàúÏúÑ {todo.priority}
                                                </Badge>
                                                <Badge colorScheme="purple" variant="outline">
                                                    {todo.category}
                                                </Badge>
                                            </HStack>
                                            <HStack>
                                                <IconButton
                                                    aria-label="ÏÉÅÏÑ∏Î≥¥Í∏∞"
                                                    icon={<ViewIcon />}
                                                    size="sm"
                                                    variant="ghost"
                                                    onClick={() => {
                                                        setSelectedTodo(todo);
                                                        onViewOpen();
                                                    }}
                                                />
                                                <IconButton
                                                    aria-label="ÏàòÏ†ï"
                                                    icon={<EditIcon />}
                                                    size="sm"
                                                    variant="ghost"
                                                    onClick={() => {
                                                        setSelectedTodo(todo);
                                                        setEditingTodo(todo);
                                                        onEditOpen();
                                                    }}
                                                />
                                                <IconButton
                                                    aria-label="ÏÇ≠Ï†ú"
                                                    icon={<DeleteIcon />}
                                                    size="sm"
                                                    variant="ghost"
                                                    colorScheme="red"
                                                    onClick={() => handleDeleteTodo(todo.id)}
                                                />
                                            </HStack>
                                        </Flex>

                                        {/* Ï†úÎ™© */}
                                        <Text fontSize="lg" fontWeight="bold">
                                            {todo.title}
                                        </Text>

                                        {/* ÏÑ§Î™Ö */}
                                        {todo.description && (
                                            <Text color="gray.600" noOfLines={2}>
                                                {todo.description}
                                            </Text>
                                        )}

                                        {/* ÏßÑÌñâÎ•† */}
                                        {todo.subtasks.length > 0 && (
                                            <Box>
                                                <Flex justify="space-between" mb={2}>
                                                    <Text fontSize="sm" color="gray.600">
                                                        ÏßÑÌñâÎ•†
                                                    </Text>
                                                    <Text fontSize="sm" color="gray.600">
                                                        {todo.progress}%
                                                    </Text>
                                                </Flex>
                                                <Progress value={todo.progress} colorScheme="blue" size="sm" />
                                            </Box>
                                        )}

                                        {/* ÌÉúÍ∑∏ */}
                                        {todo.tags.length > 0 && (
                                            <Wrap>
                                                {todo.tags.map((tag, index) => (
                                                    <WrapItem key={index}>
                                                        <Badge colorScheme="gray" variant="subtle">
                                                            {tag}
                                                        </Badge>
                                                    </WrapItem>
                                                ))}
                                            </Wrap>
                                        )}

                                        {/* ÌïòÎã® Ï†ïÎ≥¥ */}
                                        <Flex align="center" justify="space-between" fontSize="sm" color="gray.500">
                                            <HStack spacing={4}>
                                                <HStack>
                                                    <UserIcon />
                                                    <Text>{todo.assignee.name}</Text>
                                                </HStack>
                                                {todo.dueDate && (
                                                    <HStack>
                                                        <CalendarIcon />
                                                        <Text>
                                                            {new Date(todo.dueDate).toLocaleDateString()}
                                                        </Text>
                                                    </HStack>
                                                )}
                                                {todo.estimatedHours && (
                                                    <HStack>
                                                        <TimeIcon />
                                                        <Text>{todo.estimatedHours}h</Text>
                                                    </HStack>
                                                )}
                                                {todo.comments.length > 0 && (
                                                    <HStack>
                                                        <ChatIcon />
                                                        <Text>{todo.comments.length}</Text>
                                                    </HStack>
                                                )}
                                            </HStack>
                                            <Text>
                                                {new Date(todo.updatedAt).toLocaleDateString()}
                                            </Text>
                                        </Flex>
                                    </VStack>
                                </CardBody>
                            </Card>
                        ))
                    )}
                </VStack>
            </VStack>

            {/* TODO ÏÉùÏÑ± Î™®Îã¨ */}
            <Modal isOpen={isCreateOpen} onClose={onCreateClose} size="xl">
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>ÏÉà TODO ÏÉùÏÑ±</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <VStack spacing={4}>
                            <FormControl isRequired>
                                <FormLabel>Ï†úÎ™©</FormLabel>
                                <Input
                                    value={editingTodo.title || ''}
                                    onChange={(e) => setEditingTodo({ ...editingTodo, title: e.target.value })}
                                    placeholder="TODO Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                />
                            </FormControl>
                            <FormControl>
                                <FormLabel>ÏÑ§Î™Ö</FormLabel>
                                <Textarea
                                    value={editingTodo.description || ''}
                                    onChange={(e) => setEditingTodo({ ...editingTodo, description: e.target.value })}
                                    placeholder="TODO ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                    rows={3}
                                />
                            </FormControl>
                            <HStack spacing={4} w="full">
                                <FormControl>
                                    <FormLabel>Ïö∞ÏÑ†ÏàúÏúÑ</FormLabel>
                                    <NumberInput
                                        value={editingTodo.priority || 3}
                                        onChange={(value) => setEditingTodo({ ...editingTodo, priority: parseInt(value) })}
                                        min={1}
                                        max={5}
                                    >
                                        <NumberInputField />
                                        <NumberInputStepper>
                                            <NumberIncrementStepper />
                                            <NumberDecrementStepper />
                                        </NumberInputStepper>
                                    </NumberInput>
                                </FormControl>
                                <FormControl>
                                    <FormLabel>Ïπ¥ÌÖåÍ≥†Î¶¨</FormLabel>
                                    <Select
                                        value={editingTodo.category || 'feature'}
                                        onChange={(e) => setEditingTodo({ ...editingTodo, category: e.target.value })}
                                    >
                                        <option value="feature">Í∏∞Îä•</option>
                                        <option value="bug">Î≤ÑÍ∑∏</option>
                                        <option value="improvement">Í∞úÏÑ†</option>
                                        <option value="documentation">Î¨∏ÏÑú</option>
                                        <option value="testing">ÌÖåÏä§Ìä∏</option>
                                        <option value="refactoring">Î¶¨Ìå©ÌÜ†ÎßÅ</option>
                                        <option value="deployment">Î∞∞Ìè¨</option>
                                    </Select>
                                </FormControl>
                            </HStack>
                            <HStack spacing={4} w="full">
                                <FormControl>
                                    <FormLabel>ÎßàÍ∞êÏùº</FormLabel>
                                    <Input
                                        type="datetime-local"
                                        value={editingTodo.dueDate || ''}
                                        onChange={(e) => setEditingTodo({ ...editingTodo, dueDate: e.target.value })}
                                    />
                                </FormControl>
                                <FormControl>
                                    <FormLabel>ÏòàÏÉÅ ÏãúÍ∞Ñ (ÏãúÍ∞Ñ)</FormLabel>
                                    <NumberInput
                                        value={editingTodo.estimatedHours || 0}
                                        onChange={(value) => setEditingTodo({ ...editingTodo, estimatedHours: parseInt(value) })}
                                        min={0}
                                    >
                                        <NumberInputField />
                                        <NumberInputStepper>
                                            <NumberIncrementStepper />
                                            <NumberDecrementStepper />
                                        </NumberInputStepper>
                                    </NumberInput>
                                </FormControl>
                            </HStack>
                        </VStack>
                    </ModalBody>
                    <ModalFooter>
                        <Button variant="ghost" mr={3} onClick={onCreateClose}>
                            Ï∑®ÏÜå
                        </Button>
                        <Button colorScheme="blue" onClick={handleCreateTodo}>
                            ÏÉùÏÑ±
                        </Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>

            {/* TODO ÏàòÏ†ï Î™®Îã¨ */}
            <Modal isOpen={isEditOpen} onClose={onEditClose} size="xl">
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>TODO ÏàòÏ†ï</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        <VStack spacing={4}>
                            <FormControl isRequired>
                                <FormLabel>Ï†úÎ™©</FormLabel>
                                <Input
                                    value={editingTodo.title || ''}
                                    onChange={(e) => setEditingTodo({ ...editingTodo, title: e.target.value })}
                                    placeholder="TODO Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                />
                            </FormControl>
                            <FormControl>
                                <FormLabel>ÏÑ§Î™Ö</FormLabel>
                                <Textarea
                                    value={editingTodo.description || ''}
                                    onChange={(e) => setEditingTodo({ ...editingTodo, description: e.target.value })}
                                    placeholder="TODO ÏÑ§Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                                    rows={3}
                                />
                            </FormControl>
                            <HStack spacing={4} w="full">
                                <FormControl>
                                    <FormLabel>ÏÉÅÌÉú</FormLabel>
                                    <Select
                                        value={editingTodo.status || 'pending'}
                                        onChange={(e) => setEditingTodo({ ...editingTodo, status: e.target.value as any })}
                                    >
                                        <option value="pending">ÎåÄÍ∏∞</option>
                                        <option value="in_progress">ÏßÑÌñâÏ§ë</option>
                                        <option value="completed">ÏôÑÎ£å</option>
                                        <option value="cancelled">Ï∑®ÏÜå</option>
                                        <option value="on_hold">Î≥¥Î•ò</option>
                                    </Select>
                                </FormControl>
                                <FormControl>
                                    <FormLabel>Ïö∞ÏÑ†ÏàúÏúÑ</FormLabel>
                                    <NumberInput
                                        value={editingTodo.priority || 3}
                                        onChange={(value) => setEditingTodo({ ...editingTodo, priority: parseInt(value) })}
                                        min={1}
                                        max={5}
                                    >
                                        <NumberInputField />
                                        <NumberInputStepper>
                                            <NumberIncrementStepper />
                                            <NumberDecrementStepper />
                                        </NumberInputStepper>
                                    </NumberInput>
                                </FormControl>
                            </HStack>
                        </VStack>
                    </ModalBody>
                    <ModalFooter>
                        <Button variant="ghost" mr={3} onClick={onEditClose}>
                            Ï∑®ÏÜå
                        </Button>
                        <Button colorScheme="blue" onClick={handleUpdateTodo}>
                            ÏàòÏ†ï
                        </Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>

            {/* TODO ÏÉÅÏÑ∏Î≥¥Í∏∞ Î™®Îã¨ */}
            <Modal isOpen={isViewOpen} onClose={onViewClose} size="xl">
                <ModalOverlay />
                <ModalContent>
                    <ModalHeader>TODO ÏÉÅÏÑ∏Î≥¥Í∏∞</ModalHeader>
                    <ModalCloseButton />
                    <ModalBody>
                        {selectedTodo && (
                            <VStack spacing={4} align="stretch">
                                <Flex align="center" justify="space-between">
                                    <HStack spacing={3}>
                                        <Badge
                                            colorScheme={getStatusColor(selectedTodo.status)}
                                            variant="solid"
                                        >
                                            {getStatusLabel(selectedTodo.status)}
                                        </Badge>
                                        <Badge
                                            colorScheme={getPriorityColor(selectedTodo.priority)}
                                            variant="outline"
                                        >
                                            Ïö∞ÏÑ†ÏàúÏúÑ {selectedTodo.priority}
                                        </Badge>
                                        <Badge colorScheme="purple" variant="outline">
                                            {selectedTodo.category}
                                        </Badge>
                                    </HStack>
                                    <Select
                                        value={selectedTodo.status}
                                        onChange={(e) => handleStatusChange(selectedTodo.id, e.target.value)}
                                        w="150px"
                                    >
                                        <option value="pending">ÎåÄÍ∏∞</option>
                                        <option value="in_progress">ÏßÑÌñâÏ§ë</option>
                                        <option value="completed">ÏôÑÎ£å</option>
                                        <option value="cancelled">Ï∑®ÏÜå</option>
                                        <option value="on_hold">Î≥¥Î•ò</option>
                                    </Select>
                                </Flex>

                                <Text fontSize="xl" fontWeight="bold">
                                    {selectedTodo.title}
                                </Text>

                                {selectedTodo.description && (
                                    <Text color="gray.600">
                                        {selectedTodo.description}
                                    </Text>
                                )}

                                <Divider />

                                <HStack spacing={6}>
                                    <HStack>
                                        <UserIcon />
                                        <Text>Îã¥ÎãπÏûê: {selectedTodo.assignee.name}</Text>
                                    </HStack>
                                    {selectedTodo.dueDate && (
                                        <HStack>
                                            <CalendarIcon />
                                            <Text>ÎßàÍ∞êÏùº: {new Date(selectedTodo.dueDate).toLocaleDateString()}</Text>
                                        </HStack>
                                    )}
                                    {selectedTodo.estimatedHours && (
                                        <HStack>
                                            <TimeIcon />
                                            <Text>ÏòàÏÉÅ ÏãúÍ∞Ñ: {selectedTodo.estimatedHours}ÏãúÍ∞Ñ</Text>
                                        </HStack>
                                    )}
                                </HStack>

                                {selectedTodo.tags.length > 0 && (
                                    <Box>
                                        <Text fontWeight="bold" mb={2}>ÌÉúÍ∑∏</Text>
                                        <Wrap>
                                            {selectedTodo.tags.map((tag, index) => (
                                                <WrapItem key={index}>
                                                    <Badge colorScheme="gray" variant="subtle">
                                                        {tag}
                                                    </Badge>
                                                </WrapItem>
                                            ))}
                                        </Wrap>
                                    </Box>
                                )}

                                {selectedTodo.subtasks.length > 0 && (
                                    <Box>
                                        <Text fontWeight="bold" mb={2}>ÏÑúÎ∏åÌÉúÏä§ÌÅ¨</Text>
                                        <VStack spacing={2} align="stretch">
                                            {selectedTodo.subtasks.map((subtask, index) => (
                                                <HStack key={index}>
                                                    <CheckIcon
                                                        color={subtask.completed ? 'green.500' : 'gray.300'}
                                                    />
                                                    <Text
                                                        textDecoration={subtask.completed ? 'line-through' : 'none'}
                                                        color={subtask.completed ? 'gray.500' : 'inherit'}
                                                    >
                                                        {subtask.title}
                                                    </Text>
                                                </HStack>
                                            ))}
                                        </VStack>
                                    </Box>
                                )}

                                {selectedTodo.comments.length > 0 && (
                                    <Box>
                                        <Text fontWeight="bold" mb={2}>ÎåìÍ∏Ä</Text>
                                        <VStack spacing={3} align="stretch">
                                            {selectedTodo.comments.map((comment, index) => (
                                                <Box key={index} p={3} bg="gray.50" borderRadius="md">
                                                    <HStack mb={2}>
                                                        <Text fontWeight="bold" fontSize="sm">
                                                            {comment.user.name}
                                                        </Text>
                                                        <Text fontSize="sm" color="gray.500">
                                                            {new Date(comment.createdAt).toLocaleString()}
                                                        </Text>
                                                    </HStack>
                                                    <Text fontSize="sm">{comment.content}</Text>
                                                </Box>
                                            ))}
                                        </VStack>
                                    </Box>
                                )}
                            </VStack>
                        )}
                    </ModalBody>
                    <ModalFooter>
                        <Button onClick={onViewClose}>Îã´Í∏∞</Button>
                    </ModalFooter>
                </ModalContent>
            </Modal>
        </Box>
    );
};

export default TodoPage;
