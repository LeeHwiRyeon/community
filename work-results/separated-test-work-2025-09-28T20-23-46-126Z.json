{
  "timestamp": "2025-09-28T20:23:46.124Z",
  "userInput": "Button click is not working",
  "language": "english",
  "cursorPrompt": "Please analyze and fix the following issue: \"Button click is not working\"\n\nRequirements:\n1. Identify the root cause of the problem\n2. Provide a complete solution with code\n3. Include proper error handling\n4. Ensure the solution is scalable and maintainable\n5. Consider edge cases and potential bugs\n\nPlease provide:\n- Problem analysis\n- Solution approach\n- Code implementation\n- Documentation updates\n\nNote: Test cases will be generated separately with different rules.",
  "generatedCode": "// Generated code\nexport const handleUserRequest = async (input) => {\n  try {\n    const result = await processInput(input)\n    \n    if (!result.success) {\n      throw new Error(result.error)\n    }\n    \n    return {\n      success: true,\n      data: result.data,\n      timestamp: new Date().toISOString()\n    }\n  } catch (error) {\n    console.error('Error processing request:', error)\n    return {\n      success: false,\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  }\n}\n\nconst processInput = async (input) => {\n  return { success: true, data: input }\n}",
  "analysis": "Code analysis for: Button click is not working",
  "solution": "Solution approach for the reported issue",
  "documentation": "## handleUserRequest\n\n### Description\nProcesses user input and returns a structured response.",
  "unitTests": [
    {
      "type": "unit",
      "name": "handleUserRequest unit test",
      "description": "Test handleUserRequest function in isolation",
      "code": "// Unit test for handleUserRequest\ndescribe('handleUserRequest', () => {\n  it('should work correctly with valid input', () => {\n    // Arrange\n    const input = 'test input'\n    \n    // Act\n    const result = handleUserRequest(input)\n    \n    // Assert\n    expect(result).toBeDefined()\n    expect(result.success).toBe(true)\n  })\n  \n  it('should handle invalid input', () => {\n    // Arrange\n    const input = null\n    \n    // Act\n    const result = handleUserRequest(input)\n    \n    // Assert\n    expect(result.success).toBe(false)\n    expect(result.error).toBeDefined()\n  })\n  \n  it('should handle edge cases', () => {\n    // Arrange\n    const input = ''\n    \n    // Act\n    const result = handleUserRequest(input)\n    \n    // Assert\n    expect(result).toBeDefined()\n  })\n})",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      },
      "priority": "high",
      "estimatedHours": 1
    },
    {
      "type": "unit",
      "name": "processInput unit test",
      "description": "Test processInput function in isolation",
      "code": "// Unit test for processInput\ndescribe('processInput', () => {\n  it('should work correctly with valid input', () => {\n    // Arrange\n    const input = 'test input'\n    \n    // Act\n    const result = processInput(input)\n    \n    // Assert\n    expect(result).toBeDefined()\n    expect(result.success).toBe(true)\n  })\n  \n  it('should handle invalid input', () => {\n    // Arrange\n    const input = null\n    \n    // Act\n    const result = processInput(input)\n    \n    // Assert\n    expect(result.success).toBe(false)\n    expect(result.error).toBeDefined()\n  })\n  \n  it('should handle edge cases', () => {\n    // Arrange\n    const input = ''\n    \n    // Act\n    const result = processInput(input)\n    \n    // Assert\n    expect(result).toBeDefined()\n  })\n})",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      },
      "priority": "high",
      "estimatedHours": 1
    },
    {
      "type": "unit",
      "name": "Error handling unit test",
      "description": "Test error handling scenarios",
      "code": "// Error handling unit test\ndescribe('Error Handling', () => {\n  it('should catch and handle errors properly', async () => {\n    // Arrange\n    const errorInput = 'error input'\n    \n    // Act\n    const result = await handleUserRequest(errorInput)\n    \n    // Assert\n    expect(result.success).toBe(false)\n    expect(result.error).toBeDefined()\n  })\n  \n  it('should return proper error structure', async () => {\n    // Arrange\n    const errorInput = 'error input'\n    \n    // Act\n    const result = await handleUserRequest(errorInput)\n    \n    // Assert\n    expect(result).toHaveProperty('success')\n    expect(result).toHaveProperty('error')\n    expect(result).toHaveProperty('timestamp')\n  })\n})",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      },
      "priority": "high",
      "estimatedHours": 1
    },
    {
      "type": "unit",
      "name": "Edge cases unit test",
      "description": "Test edge cases and boundary conditions",
      "code": "// Edge cases unit test\ndescribe('Edge Cases', () => {\n  it('should handle empty string', async () => {\n    const result = await handleUserRequest('')\n    expect(result).toBeDefined()\n  })\n  \n  it('should handle very long string', async () => {\n    const longString = 'a'.repeat(10000)\n    const result = await handleUserRequest(longString)\n    expect(result).toBeDefined()\n  })\n  \n  it('should handle special characters', async () => {\n    const specialString = '!@#$%^&*()'\n    const result = await handleUserRequest(specialString)\n    expect(result).toBeDefined()\n  })\n})",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      },
      "priority": "medium",
      "estimatedHours": 1
    }
  ],
  "integrationTests": [
    {
      "type": "integration",
      "name": "Component integration test",
      "description": "Test component interaction and data flow",
      "code": "// Component integration test\ndescribe('Component Integration', () => {\n  it('should render and interact properly', () => {\n    // Arrange\n    render(<UserRequestComponent />)\n    \n    // Act\n    const input = screen.getByRole('textbox')\n    fireEvent.change(input, { target: { value: 'test input' } })\n    fireEvent.click(screen.getByRole('button'))\n    \n    // Assert\n    expect(screen.getByText('Success')).toBeInTheDocument()\n  })\n  \n  it('should handle component state changes', () => {\n    // Arrange\n    render(<UserRequestComponent />)\n    \n    // Act\n    const input = screen.getByRole('textbox')\n    fireEvent.change(input, { target: { value: 'test input' } })\n    \n    // Assert\n    expect(input.value).toBe('test input')\n  })\n})",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      },
      "priority": "high",
      "estimatedHours": 2
    },
    {
      "type": "integration",
      "name": "API integration test",
      "description": "Test API calls and responses",
      "code": "// API integration test\ndescribe('API Integration', () => {\n  it('should call API and handle response', async () => {\n    // Arrange\n    const mockResponse = { success: true, data: 'test data' }\n    fetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => mockResponse\n    })\n    \n    // Act\n    const result = await handleUserRequest('test input')\n    \n    // Assert\n    expect(fetch).toHaveBeenCalledWith('/api/process', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ input: 'test input' })\n    })\n    expect(result.success).toBe(true)\n  })\n  \n  it('should handle API errors', async () => {\n    // Arrange\n    fetch.mockRejectedValueOnce(new Error('API Error'))\n    \n    // Act\n    const result = await handleUserRequest('test input')\n    \n    // Assert\n    expect(result.success).toBe(false)\n    expect(result.error).toBe('API Error')\n  })\n})",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      },
      "priority": "high",
      "estimatedHours": 2
    },
    {
      "type": "integration",
      "name": "Database integration test",
      "description": "Test database operations and transactions",
      "code": "// Database integration test\ndescribe('Database Integration', () => {\n  it('should save data to database', async () => {\n    // Arrange\n    const testData = { input: 'test input', result: 'success' }\n    \n    // Act\n    const result = await saveToDatabase(testData)\n    \n    // Assert\n    expect(result.success).toBe(true)\n    expect(result.id).toBeDefined()\n  })\n  \n  it('should retrieve data from database', async () => {\n    // Arrange\n    const testId = 'test-id'\n    \n    // Act\n    const result = await getFromDatabase(testId)\n    \n    // Assert\n    expect(result).toBeDefined()\n    expect(result.id).toBe(testId)\n  })\n})",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      },
      "priority": "medium",
      "estimatedHours": 3
    },
    {
      "type": "integration",
      "name": "User scenario test",
      "description": "Test complete user workflows",
      "code": "// User scenario test\ndescribe('User Scenario', () => {\n  it('should complete full user workflow', async () => {\n    // Arrange\n    render(<App />)\n    \n    // Act - Step 1: User enters input\n    const input = screen.getByRole('textbox')\n    fireEvent.change(input, { target: { value: 'user input' } })\n    \n    // Act - Step 2: User clicks submit\n    fireEvent.click(screen.getByRole('button', { name: 'Submit' }))\n    \n    // Act - Step 3: Wait for processing\n    await waitFor(() => {\n      expect(screen.getByText('Processing...')).toBeInTheDocument()\n    })\n    \n    // Act - Step 4: Wait for result\n    await waitFor(() => {\n      expect(screen.getByText('Success!')).toBeInTheDocument()\n    })\n    \n    // Assert\n    expect(screen.getByText('Result: user input')).toBeInTheDocument()\n  })\n})",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      },
      "priority": "high",
      "estimatedHours": 4
    }
  ],
  "e2eTests": [
    {
      "type": "e2e",
      "name": "User journey E2E test",
      "description": "Test complete user journey from start to finish",
      "code": "// User journey E2E test\ndescribe('User Journey E2E', () => {\n  it('should complete full user journey', () => {\n    // Step 1: Visit homepage\n    cy.visit('/')\n    cy.get('[data-testid=\"homepage\"]').should('be.visible')\n    \n    // Step 2: Navigate to input page\n    cy.get('[data-testid=\"input-link\"]').click()\n    cy.url().should('include', '/input')\n    \n    // Step 3: Enter input\n    cy.get('[data-testid=\"input-field\"]').type('test input')\n    cy.get('[data-testid=\"submit-button\"]').click()\n    \n    // Step 4: Wait for processing\n    cy.get('[data-testid=\"processing\"]').should('be.visible')\n    \n    // Step 5: Verify result\n    cy.get('[data-testid=\"result\"]').should('contain', 'test input')\n    \n    // Step 6: Navigate back\n    cy.get('[data-testid=\"back-button\"]').click()\n    cy.url().should('include', '/')\n  })\n})",
      "rules": {
        "scope": "full application",
        "focus": "user workflow",
        "isolation": "real environment",
        "speed": "slow",
        "coverage": "low",
        "patterns": [
          "describe",
          "it",
          "cy.visit",
          "cy.get",
          "cy.click"
        ]
      },
      "priority": "high",
      "estimatedHours": 4
    },
    {
      "type": "e2e",
      "name": "Cross-browser E2E test",
      "description": "Test functionality across different browsers",
      "code": "// Cross-browser E2E test\ndescribe('Cross-browser E2E', () => {\n  it('should work in Chrome', () => {\n    cy.visit('/')\n    cy.get('[data-testid=\"input-field\"]').type('chrome test')\n    cy.get('[data-testid=\"submit-button\"]').click()\n    cy.get('[data-testid=\"result\"]').should('contain', 'chrome test')\n  })\n  \n  it('should work in Firefox', () => {\n    cy.visit('/')\n    cy.get('[data-testid=\"input-field\"]').type('firefox test')\n    cy.get('[data-testid=\"submit-button\"]').click()\n    cy.get('[data-testid=\"result\"]').should('contain', 'firefox test')\n  })\n})",
      "rules": {
        "scope": "full application",
        "focus": "user workflow",
        "isolation": "real environment",
        "speed": "slow",
        "coverage": "low",
        "patterns": [
          "describe",
          "it",
          "cy.visit",
          "cy.get",
          "cy.click"
        ]
      },
      "priority": "medium",
      "estimatedHours": 3
    }
  ],
  "performanceTests": [
    {
      "type": "performance",
      "name": "Loading performance test",
      "description": "Test page loading performance",
      "code": "// Loading performance test\ndescribe('Loading Performance', () => {\n  it('should load within acceptable time', async () => {\n    const startTime = performance.now()\n    \n    // Act\n    await handleUserRequest('test input')\n    \n    const endTime = performance.now()\n    const loadTime = endTime - startTime\n    \n    // Assert\n    expect(loadTime).toBeLessThan(1000) // 1 second\n  })\n  \n  it('should handle multiple requests efficiently', async () => {\n    const startTime = performance.now()\n    \n    // Act\n    await Promise.all([\n      handleUserRequest('input1'),\n      handleUserRequest('input2'),\n      handleUserRequest('input3')\n    ])\n    \n    const endTime = performance.now()\n    const loadTime = endTime - startTime\n    \n    // Assert\n    expect(loadTime).toBeLessThan(2000) // 2 seconds\n  })\n})",
      "rules": {
        "scope": "performance metrics",
        "focus": "speed and efficiency",
        "isolation": "real conditions",
        "speed": "variable",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "performance.now",
          "measure"
        ]
      },
      "priority": "high",
      "estimatedHours": 2
    },
    {
      "type": "performance",
      "name": "Memory usage test",
      "description": "Test memory usage and leaks",
      "code": "// Memory usage test\ndescribe('Memory Usage', () => {\n  it('should not leak memory', async () => {\n    const initialMemory = performance.memory?.usedJSHeapSize || 0\n    \n    // Act - Process multiple requests\n    for (let i = 0; i < 100; i++) {\n      await handleUserRequest(`input-${i}`)\n    }\n    \n    // Force garbage collection\n    if (global.gc) {\n      global.gc()\n    }\n    \n    const finalMemory = performance.memory?.usedJSHeapSize || 0\n    const memoryIncrease = finalMemory - initialMemory\n    \n    // Assert\n    expect(memoryIncrease).toBeLessThan(10000000) // 10MB\n  })\n})",
      "rules": {
        "scope": "performance metrics",
        "focus": "speed and efficiency",
        "isolation": "real conditions",
        "speed": "variable",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "performance.now",
          "measure"
        ]
      },
      "priority": "medium",
      "estimatedHours": 2
    }
  ],
  "securityTests": [
    {
      "type": "security",
      "name": "Authentication security test",
      "description": "Test authentication security vulnerabilities",
      "code": "// Authentication security test\ndescribe('Authentication Security', () => {\n  it('should prevent unauthorized access', async () => {\n    // Arrange\n    const unauthorizedInput = 'malicious input'\n    \n    // Act\n    const result = await handleUserRequest(unauthorizedInput)\n    \n    // Assert\n    expect(result.success).toBe(false)\n    expect(result.error).toContain('unauthorized')\n  })\n  \n  it('should validate input properly', async () => {\n    // Arrange\n    const maliciousInput = '<script>alert(\"xss\")</script>'\n    \n    // Act\n    const result = await handleUserRequest(maliciousInput)\n    \n    // Assert\n    expect(result.data).not.toContain('<script>')\n    expect(result.data).toContain('&lt;script&gt;')\n  })\n})",
      "rules": {
        "scope": "security vulnerabilities",
        "focus": "attack vectors",
        "isolation": "controlled environment",
        "speed": "medium",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "security",
          "vulnerability",
          "attack"
        ]
      },
      "priority": "high",
      "estimatedHours": 3
    },
    {
      "type": "security",
      "name": "Input validation security test",
      "description": "Test input validation and sanitization",
      "code": "// Input validation security test\ndescribe('Input Validation Security', () => {\n  it('should sanitize SQL injection attempts', async () => {\n    // Arrange\n    const sqlInjection = \"'; DROP TABLE users; --\"\n    \n    // Act\n    const result = await handleUserRequest(sqlInjection)\n    \n    // Assert\n    expect(result.success).toBe(true)\n    expect(result.data).not.toContain('DROP TABLE')\n  })\n  \n  it('should handle XSS attempts', async () => {\n    // Arrange\n    const xssAttempt = '<img src=\"x\" onerror=\"alert(1)\">'\n    \n    // Act\n    const result = await handleUserRequest(xssAttempt)\n    \n    // Assert\n    expect(result.data).not.toContain('onerror')\n    expect(result.data).toContain('&lt;img')\n  })\n})",
      "rules": {
        "scope": "security vulnerabilities",
        "focus": "attack vectors",
        "isolation": "controlled environment",
        "speed": "medium",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "security",
          "vulnerability",
          "attack"
        ]
      },
      "priority": "high",
      "estimatedHours": 2
    }
  ],
  "qaResults": [
    {
      "type": "test_coverage",
      "severity": "medium",
      "message": "No test files found",
      "suggestion": "Add test files for better coverage",
      "category": "test"
    }
  ],
  "staticAnalysis": [
    {
      "type": "complexity",
      "severity": "high",
      "message": "Cyclomatic complexity: 586",
      "suggestion": "Refactor complex functions",
      "category": "static"
    }
  ],
  "generatedTodos": [
    {
      "id": "UNIT-1759091026120-0",
      "title": "Create unit test: handleUserRequest unit test",
      "description": "Test handleUserRequest function in isolation",
      "priority": "high",
      "category": "test",
      "estimatedHours": 1,
      "source": "unit_test",
      "testType": "unit",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      }
    },
    {
      "id": "UNIT-1759091026120-1",
      "title": "Create unit test: processInput unit test",
      "description": "Test processInput function in isolation",
      "priority": "high",
      "category": "test",
      "estimatedHours": 1,
      "source": "unit_test",
      "testType": "unit",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      }
    },
    {
      "id": "UNIT-1759091026120-2",
      "title": "Create unit test: Error handling unit test",
      "description": "Test error handling scenarios",
      "priority": "high",
      "category": "test",
      "estimatedHours": 1,
      "source": "unit_test",
      "testType": "unit",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      }
    },
    {
      "id": "UNIT-1759091026120-3",
      "title": "Create unit test: Edge cases unit test",
      "description": "Test edge cases and boundary conditions",
      "priority": "medium",
      "category": "test",
      "estimatedHours": 1,
      "source": "unit_test",
      "testType": "unit",
      "rules": {
        "scope": "single function/component",
        "focus": "logic correctness",
        "isolation": "mocked dependencies",
        "speed": "fast",
        "coverage": "high",
        "patterns": [
          "describe",
          "it",
          "expect",
          "mock"
        ]
      }
    },
    {
      "id": "INTEGRATION-1759091026120-0",
      "title": "Create integration test: Component integration test",
      "description": "Test component interaction and data flow",
      "priority": "high",
      "category": "test",
      "estimatedHours": 2,
      "source": "integration_test",
      "testType": "integration",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      }
    },
    {
      "id": "INTEGRATION-1759091026120-1",
      "title": "Create integration test: API integration test",
      "description": "Test API calls and responses",
      "priority": "high",
      "category": "test",
      "estimatedHours": 2,
      "source": "integration_test",
      "testType": "integration",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      }
    },
    {
      "id": "INTEGRATION-1759091026120-2",
      "title": "Create integration test: Database integration test",
      "description": "Test database operations and transactions",
      "priority": "medium",
      "category": "test",
      "estimatedHours": 3,
      "source": "integration_test",
      "testType": "integration",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      }
    },
    {
      "id": "INTEGRATION-1759091026120-3",
      "title": "Create integration test: User scenario test",
      "description": "Test complete user workflows",
      "priority": "high",
      "category": "test",
      "estimatedHours": 4,
      "source": "integration_test",
      "testType": "integration",
      "rules": {
        "scope": "multiple components",
        "focus": "component interaction",
        "isolation": "real dependencies",
        "speed": "medium",
        "coverage": "medium",
        "patterns": [
          "describe",
          "it",
          "render",
          "fireEvent",
          "waitFor"
        ]
      }
    },
    {
      "id": "E2E-1759091026120-0",
      "title": "Create E2E test: User journey E2E test",
      "description": "Test complete user journey from start to finish",
      "priority": "high",
      "category": "test",
      "estimatedHours": 4,
      "source": "e2e_test",
      "testType": "e2e",
      "rules": {
        "scope": "full application",
        "focus": "user workflow",
        "isolation": "real environment",
        "speed": "slow",
        "coverage": "low",
        "patterns": [
          "describe",
          "it",
          "cy.visit",
          "cy.get",
          "cy.click"
        ]
      }
    },
    {
      "id": "E2E-1759091026120-1",
      "title": "Create E2E test: Cross-browser E2E test",
      "description": "Test functionality across different browsers",
      "priority": "medium",
      "category": "test",
      "estimatedHours": 3,
      "source": "e2e_test",
      "testType": "e2e",
      "rules": {
        "scope": "full application",
        "focus": "user workflow",
        "isolation": "real environment",
        "speed": "slow",
        "coverage": "low",
        "patterns": [
          "describe",
          "it",
          "cy.visit",
          "cy.get",
          "cy.click"
        ]
      }
    },
    {
      "id": "PERF-1759091026120-0",
      "title": "Create performance test: Loading performance test",
      "description": "Test page loading performance",
      "priority": "high",
      "category": "performance",
      "estimatedHours": 2,
      "source": "performance_test",
      "testType": "performance",
      "rules": {
        "scope": "performance metrics",
        "focus": "speed and efficiency",
        "isolation": "real conditions",
        "speed": "variable",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "performance.now",
          "measure"
        ]
      }
    },
    {
      "id": "PERF-1759091026120-1",
      "title": "Create performance test: Memory usage test",
      "description": "Test memory usage and leaks",
      "priority": "medium",
      "category": "performance",
      "estimatedHours": 2,
      "source": "performance_test",
      "testType": "performance",
      "rules": {
        "scope": "performance metrics",
        "focus": "speed and efficiency",
        "isolation": "real conditions",
        "speed": "variable",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "performance.now",
          "measure"
        ]
      }
    },
    {
      "id": "SEC-1759091026120-0",
      "title": "Create security test: Authentication security test",
      "description": "Test authentication security vulnerabilities",
      "priority": "high",
      "category": "security",
      "estimatedHours": 3,
      "source": "security_test",
      "testType": "security",
      "rules": {
        "scope": "security vulnerabilities",
        "focus": "attack vectors",
        "isolation": "controlled environment",
        "speed": "medium",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "security",
          "vulnerability",
          "attack"
        ]
      }
    },
    {
      "id": "SEC-1759091026120-1",
      "title": "Create security test: Input validation security test",
      "description": "Test input validation and sanitization",
      "priority": "high",
      "category": "security",
      "estimatedHours": 2,
      "source": "security_test",
      "testType": "security",
      "rules": {
        "scope": "security vulnerabilities",
        "focus": "attack vectors",
        "isolation": "controlled environment",
        "speed": "medium",
        "coverage": "specific",
        "patterns": [
          "describe",
          "it",
          "security",
          "vulnerability",
          "attack"
        ]
      }
    },
    {
      "id": "QA-1759091026120-0",
      "title": "Fix test_coverage issue",
      "description": "Add test files for better coverage",
      "priority": "medium",
      "category": "test",
      "estimatedHours": 2,
      "source": "qa",
      "testType": "qa"
    },
    {
      "id": "STATIC-1759091026120-0",
      "title": "Improve complexity",
      "description": "Refactor complex functions",
      "priority": "high",
      "category": "static",
      "estimatedHours": 4,
      "source": "static",
      "testType": "static"
    }
  ],
  "summary": {
    "totalTodos": 16,
    "highPriorityTodos": 11,
    "estimatedHours": 37,
    "unitTests": 4,
    "integrationTests": 4,
    "e2eTests": 2,
    "performanceTests": 2,
    "securityTests": 2,
    "qaIssues": 1,
    "staticIssues": 1,
    "categories": [
      "test",
      "performance",
      "security",
      "static"
    ],
    "testTypes": [
      "unit",
      "integration",
      "e2e",
      "performance",
      "security",
      "qa",
      "static"
    ],
    "sources": [
      "unit_test",
      "integration_test",
      "e2e_test",
      "performance_test",
      "security_test",
      "qa",
      "static"
    ],
    "nextSteps": [
      "Review generated code",
      "Create unit tests (TestCase)",
      "Create integration tests (시나리오 테스트)",
      "Create E2E tests",
      "Create performance tests",
      "Create security tests",
      "Fix QA issues",
      "Address static analysis findings",
      "Run all tests",
      "Deploy changes"
    ]
  }
}alysis findings",
      "Run all tests",
      "Deploy changes"
    ]
  }
}